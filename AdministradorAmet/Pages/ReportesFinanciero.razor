@page "/ReportesFinancieros"
@using Microsoft.AspNetCore.Http
@using Radzen
@using System.Globalization
@using AdministradorAmet.Models
@using System.Text.Json.Serialization
@using System.IO
@inject IHttpContextAccessor HttpContextAccessor
@using AdministradorAmet.Models
@using System.Text.Json
@using System.Net
@using iTextSharp.text
@using iTextSharp.text.pdf
@using Newtonsoft.Json;

@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject Microsoft.JSInterop.IJSRuntime JSRuntime



<link href="https://fonts.googleapis.com/css2?family=Roboto:wght@500&display=swap" rel="stylesheet">
<link href="https://fonts.googleapis.com/css2?family=Poppins:wght@500&display=swap" rel="stylesheet">

<div class="header-container">
    <h1 class="title">Reportes Financiero</h1>
</div>
<hr class="divider" />

<div class="containerArriba">
    <!-- Cédula -->
    <div class="form-group slideup-placeholder">
        <RadzenTextBox @bind-Value="filterModel.Cedula" Placeholder=" " Style="width:150px; font-weight:bold;" />
        <label class="@(string.IsNullOrEmpty(filterModel.Cedula) ? "" : "active")">Cédula</label>
    </div>

    <!-- No. Multa -->
    <div class="form-group slideup-placeholder">
        <RadzenTextBox @bind-Value="filterModel.NoMulta" Placeholder=" " Style="width:150px ;font-weight:bold; " />
        <label class="@(string.IsNullOrEmpty(filterModel.NoMulta) ? "" : "active")">No. Multa</label>
    </div>

    <!-- Fecha Inicio -->
    <div class="form-group slideup-placeholder date-picker-container">
        <RadzenDatePicker @bind-Value="filterModel.FechaInicio" DateFormat="dd/MM/yyyy" Style="width:150px; font-weight:bold;" Change="OnDateChange" />
        <label class="@(IsFechaInicioSet ? "active" : "")">Fecha Inicio</label>
    </div>

    <!-- Fecha Fin -->
    <div class="form-group slideup-placeholder date-picker-container">
        <RadzenDatePicker @bind-Value="filterModel.FechaFin" DateFormat="dd/MM/yyyy" Style="width:150px; font-weight:bold;" Change="OnDateChange" />
        <label class="@(IsFechaFinSet ? "active" : "")">Fecha Fin</label>
    </div>


    <!-- Infracción -->
    <div class="form-group slideup-placeholder">
        <RadzenDropDown @bind-Value="filterModel.Infraccion" Data=@infracciones TextProperty="Text" ValueProperty="Value" Placeholder=" " Style="width:150px; font-weight:bold;" />
        <label class="@(string.IsNullOrEmpty(filterModel.Infraccion?.ToString()) ? "" : "active")">Infracción</label>
    </div>

    <!-- No. Agente -->
    <div class="form-group slideup-placeholder">
        <RadzenTextBox @bind-Value="filterModel.NoAgente" Placeholder=" " Style="width:150px;font-weight:bold;" />
        <label class="@(string.IsNullOrEmpty(filterModel.NoAgente) ? "" : "active")">No. Agente</label>
    </div>
</div>


<div class="containerAbajo">
    <div class="form-group slideup-placeholder">
        <RadzenDropDown @bind-Value="filterModel.TipoDeVehiculo" Data=@tipoVehiculos TextProperty="Text" ValueProperty="Value" Placeholder=" " Style="width:180px;font-weight:bold;" />
        <label class="@(string.IsNullOrEmpty(filterModel.TipoDeVehiculo) ? "" : "active")">Tipo de Vehiculo</label>
    </div>


    <div class="form-group slideup-placeholder">
        <RadzenTextBox @bind-Value="filterModel.Zona" Placeholder=" " Style="width:150px;font-weight:bold;" />
        <label class="@(string.IsNullOrEmpty(filterModel.Zona) ? "" : "active")">Zona</label>
    </div>

    <div class="form-group slideup-placeholder">
        <RadzenTextBox @bind-Value="filterModel.IncidentLocation" Placeholder=" " Style="width:150px;font-weight:bold;" />
        <label class="@(string.IsNullOrEmpty(filterModel.IncidentLocation) ? "" : "active")">Lugar del Hecho</label>
    </div>
  

    <div class="form-group slideup-placeholder">
        <RadzenTextBox @bind-Value="filterModel.MarcaVehiculo" Placeholder=" " Style="width:150px;font-weight:bold;" />
        <label class="@(string.IsNullOrEmpty(filterModel.MarcaVehiculo) ? "" : "active")">Marca</label>
    </div>

    <!-- Estado -->
    <div class="form-group slideup-placeholder">
        <RadzenDropDown @bind-Value="filterModel.Estado" Data=@estados TextProperty="Text" ValueProperty="Value" Placeholder=" " Style="width:150px;font-weight:bold;" />
        <label class="@(string.IsNullOrEmpty(filterModel.Estado) ? "" : "active")">Estado</label>
    </div>

    <!-- Botón Generar -->
    <div class="form-group">
        <RadzenButton Text="Generar" Click="OnFilter" Style="width: 140px; height: 40px; background-color: #009C40; color: white; border: 3px solid #009C40;" />
    </div>
</div>

@if (mostrarMensaje && !string.IsNullOrEmpty(mensajeNoResultados))
{
    <div class="alert alert-warning">
        @mensajeNoResultados
    </div>
}



@if (!mostrarResultados)
{
    <div class="containerdebajo">
        <img src="imagenes/ametlogo.png" class="logo @(mostrarResultados ? "reducido" : "")" />
        <h3 class="info-text">
            Para generar el reporte, elige opciones con los filtros y luego haz clic en el botón "Generar"
        </h3>
    </div>
}
<div class="data-grid-container @(mostrarResultados ? "data-grid-visible" : "data-grid-hidden")">
    <div class="contenedor" style="margin-top:45px; gap:20px">

        <div class="containerizquierdo">
            <RadzenStack class="rz-p-0 rz-p-md-6 rz-p-lg-12">
                <RadzenCard>
                    <RadzenStack Gap="0.5rem" Wrap="FlexWrap.Wrap">
                        <RadzenCheckBox @bind-Value="@showDataLabels" Name="dataLabels"></RadzenCheckBox>
                        <RadzenLabel Text="Mostrar Datos" Component="dataLabels" />
                    </RadzenStack>
                </RadzenCard>

                <RadzenRow>
                    <RadzenColumn Size="12">
                        <RadzenChart>
                            <RadzenStackedColumnSeries Data="@barChartData" CategoryProperty="Category" Title="Multas" ValueProperty="Value"
                            Fills="@(new[] { "#009C40", "#fc8403" })">
                                <RadzenSeriesDataLabels Visible="@showDataLabels" />
                            </RadzenStackedColumnSeries>
                            <RadzenValueAxis Min="0">
                                <RadzenGridLines Visible="true" />
                                <RadzenAxisTitle Text="Monto en RD$" />
                            </RadzenValueAxis>
                        </RadzenChart>
                    </RadzenColumn>
                </RadzenRow>
            </RadzenStack>
        </div>

        <div class="containerderecho">
            <RadzenStack class="rz-p-0 rz-p-md-6 rz-p-lg-12">
                <RadzenCard Style="width: 100%;">
                    <RadzenStack Gap="0.5rem" Wrap="FlexWrap.Wrap">
                        <RadzenCheckBox @bind-Value="@showDataLabels" Name="dataLabels"></RadzenCheckBox>
                        <RadzenLabel Text="Show Data Labels" Component="dataLabels" />
                    </RadzenStack>
                </RadzenCard>

                <RadzenStack Style="width: 100%; max-width: 600px;">
                    <RadzenChart>
                        <RadzenDonutSeries Data="@donutChartData" CategoryProperty="Category" ValueProperty="Value" TotalAngle="360" StartAngle="360"
                        Fills="@(new[] { "#009C40", "#fc8403" })">
                            <ChildContent>
                                <RadzenSeriesDataLabels Visible="@showDataLabels" />
                            </ChildContent>
                            <TitleTemplate>
                                <div class="rz-donut-content">
                                    <div>Multas</div>
                                </div>
                            </TitleTemplate>
                        </RadzenDonutSeries>
                    </RadzenChart>
                </RadzenStack>
            </RadzenStack>
        </div>

    </div>


    <div class="containerabajo">
        @if (filteredTickets != null && filteredTickets.Any())
        {
            <div style="margin-bottom: 20px; margin-left:77%">
                <span style="margin-left: 60px;">Formato a exportar:</span>
                <button @onclick="export" style="background-color: #009C40; color: white; padding: 5px 10px; border: none; cursor: pointer; border-radius: 5px;">PDF</button>
            </div>

            <RadzenDataGrid Data="@filteredTickets" TItem="Ticket" ShowPagingSummary="true" AllowPaging="true" PageSize="15"
            AllowFiltering="true" AllowSorting="true"
            Style="margin-top:50px; width: 100%; border-collapse: collapse; background-color: white;">
                <Columns>
                    <RadzenDataGridColumn TItem="Ticket" Property="TicketId" Title="No. Multa" Width="180px">
                        <HeaderTemplate>
                            <span style="font-weight: bold; font-size: medium; font-family: 'Poppins', sans-serif;">No. Multa</span>
                        </HeaderTemplate>
                        <Template Context="ticket">
                            <span style="font-family: 'Roboto', sans-serif;font-size: medium">@ticket.TicketId</span>
                        </Template>
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn TItem="Ticket" Property="TicketDate" Title="Fecha" Width="160px">
                        <HeaderTemplate>
                            <span style="font-weight: bold; font-size: medium; font-family: 'Poppins', sans-serif;">Fecha</span>
                        </HeaderTemplate>
                        <Template Context="ticket">

                            <span style="font-family: 'Roboto', sans-serif;font-size: medium">@ticket.FormattedTicketDate</span>
                        </Template>
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn TItem="Ticket" Property="Identification" Title="Cedula" Width="200px">
                        <HeaderTemplate>
                            <span style="font-weight: bold; font-size: medium; font-family: 'Poppins', sans-serif;">Cedula</span>
                        </HeaderTemplate>
                        <Template Context="ticket">

                            <span style="font-family: 'Roboto', sans-serif;font-size: medium">@ticket.Identification</span>
                        </Template>
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn TItem="Ticket" Property="Status" Title="Estado" Width="180px">
                        <HeaderTemplate>
                            <span style="font-weight: bold; font-size: medium; font-family: 'Poppins', sans-serif;">Estado</span>
                        </HeaderTemplate>
                        <Template Context="ticket">
                            <span style="font-family: 'Roboto', sans-serif;font-size: medium">
                                @if (ticket.Status == "Paid")
                                {
                                    <span>Pagada</span>
                                }
                                else if (ticket.Status == "pending")
                                {
                                    <span>Pendiente</span>
                                }
                                else
                                {
                                    <span>@ticket.Status</span>
                                }
                            </span>
                        </Template>
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn TItem="Ticket" Title="Pagadas" Width="180px">
                        <HeaderTemplate>
                            <span style="font-weight: bold; font-size: medium; font-family: 'Poppins', sans-serif;">Pagadas</span>
                        </HeaderTemplate>
                        <Template Context="ticket">
                            <span style="font-family: 'Roboto', sans-serif;font-size: medium">
                                @if (ticket.Status == "Paid")
                                {
                                    @ticket.Articulo.Price.ToString("C", CultureInfo.GetCultureInfo("en-US"))

                                }
                            </span>
                        </Template>
                        <FooterTemplate>
                            <span style="font-family: 'Roboto', sans-serif;font-size: medium">
                                <b>
                                    @filteredTickets.Where(t => t.Status == "Paid").Sum(t => t.Articulo.Price).ToString("C", new CultureInfo("en-US"))

                                </b>
                            </span>
                        </FooterTemplate>
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn TItem="Ticket" Title="Pendientes" Width="180px">
                        <HeaderTemplate>
                            <span style="font-weight: bold; font-size: medium; font-family: 'Poppins', sans-serif;">Pendientes</span>
                        </HeaderTemplate>
                        <Template Context="ticket">
                            <span style="font-family: 'Roboto', sans-serif;font-size: medium">
                                @if (ticket.Status == "pending")
                                {
                                    @ticket.Articulo.Price.ToString("C", CultureInfo.GetCultureInfo("en-US"))
                                }
                            </span>
                        </Template>
                        <FooterTemplate>
                            <span style="font-family: 'Roboto', sans-serif;font-size: medium">
                                <b>
                                    @filteredTickets.Where(t => t.Status == "pending").Sum(t => t.Articulo.Price).ToString("C", new CultureInfo("en-US"))

                                </b>
                            </span>
                        </FooterTemplate>
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn TItem="Ticket" Title="Acción" Width="160px">
                        <HeaderTemplate>
                            <span style="font-weight: bold; font-size: medium; font-family: 'Poppins', sans-serif;">Acción</span>
                        </HeaderTemplate>
                        <Template Context="ticket">
                            <a href="/detallemulta/@ticket.TicketId" title="Ver multa">
                                <img src="imagenes/trespuntos.png" class="lupa" alt="Ver detalles" style="width: 20px; height: 20px; cursor: pointer;" />
                            </a>
                        </Template>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>
        }
        else
        {
            <div class="no-results-message" style="margin-top: 20px; text-align: center; font-size: 16px; color: #ff0000;">
                <p>No se encontraron resultados.</p>
            </div>
        }

    </div>

</div>

@code {

    private FilterModel filterModel = new FilterModel();
    private bool IsFechaInicioSet => filterModel.FechaInicio.HasValue;
    private bool IsFechaFinSet => filterModel.FechaFin.HasValue;
    private bool mostrarResultados = false;
    private IEnumerable<Ticket> tickets;
    private IEnumerable<Ticket> filteredTickets;

    private string mensajeNoResultados = string.Empty;
    private bool mostrarMensaje = false;

    private List<Infraccion> infracciones = new List<Infraccion>
    {
        new Infraccion { Text = "-- Limpiar selección --", Value = null },
        new Infraccion { Text = "ART 29", Value = 1 },
        new Infraccion { Text = "ART 40-41", Value = 2 },
        new Infraccion { Text = "ART 47-7", Value = 3 },
        new Infraccion { Text = "ART 146/02", Value = 4 },
        new Infraccion { Text = "ART 27-3", Value = 5 },
        new Infraccion { Text = "ART 27-4", Value = 6 },
        new Infraccion { Text = "ART 110", Value = 7 },
        new Infraccion { Text = "ART 1 LEY513", Value = 8 },
        new Infraccion { Text = "ART 135C", Value = 9 },
        new Infraccion { Text = "ART 33-77", Value = 10 },
        new Infraccion { Text = "ART 88", Value = 11 },
        new Infraccion { Text = "ART 81", Value = 12 },
        new Infraccion { Text = "ART 97", Value = 13 },
        new Infraccion { Text = "ART 97-A", Value = 14 },
        new Infraccion { Text = "ART 76-C", Value = 15 },
        new Infraccion { Text = "ART 27-22", Value = 16 },
        new Infraccion { Text = "ART 27-2", Value = 17 },
        new Infraccion { Text = "ART 27-27", Value = 18 },
        new Infraccion { Text = "ART 174", Value = 19 },
        new Infraccion { Text = "ART 162", Value = 20 },
        new Infraccion { Text = "ART 74-H", Value = 21 },
        new Infraccion { Text = "ART 27-4", Value = 22 },
        new Infraccion { Text = "ART 144", Value = 23 },
        new Infraccion { Text = "ART 145", Value = 24 },
        new Infraccion { Text = "ART 158", Value = 25 },
        new Infraccion { Text = "ART 164-B", Value = 26 },
        new Infraccion { Text = "ART 164 AP 200", Value = 27 },
        new Infraccion { Text = "ART 171 A-3", Value = 28 },
        new Infraccion { Text = "ART 173-G", Value = 29 },
        new Infraccion { Text = "ART 173-D", Value = 30 },
        new Infraccion { Text = "ART 164-D", Value = 31 },
        new Infraccion { Text = "ART 130 LEY 241", Value = 32 },
        new Infraccion { Text = "ART 130", Value = 33 },
        new Infraccion { Text = "ART 62", Value = 34 },
        new Infraccion { Text = "ART 5", Value = 35 },
        new Infraccion { Text = "ART 27 Y 47", Value = 36 },
        new Infraccion { Text = "ART 161", Value = 37 },
        new Infraccion { Text = "ART 96-B-1", Value = 38 },
        new Infraccion { Text = "ART 1 LEY 143-01", Value = 39 },
        new Infraccion { Text = "ART 106", Value = 40 }
    };

    private List<Estado> estados = new List<Estado>
    {
        new Estado { Text = "-- Limpiar selección --", Value = null },
        new Estado { Text = "Pendiente", Value = "pending" },
        new Estado { Text = "Pagada", Value = "paid" }
    };

    private List<TipoVehiculo> tipoVehiculos = new List<TipoVehiculo>
    {
        new TipoVehiculo { Text = "-- Limpiar selección --", Value = null },
        new TipoVehiculo { Text = "Motocicleta", Value = "1" },
        new TipoVehiculo { Text = "Automóvil", Value = "2" },
        new TipoVehiculo { Text = "Camioneta", Value = "3" },
        new TipoVehiculo { Text = "Autobús", Value = "4" },
         new TipoVehiculo { Text = "Otros", Value = "5" }
    };

    private async Task OnFilter()
    {
        mostrarResultados = false;
        mostrarMensaje = false;
        mensajeNoResultados = string.Empty;

        if (filterModel.FechaFin.HasValue && !filterModel.FechaInicio.HasValue)
        {
            filterModel.FechaInicio = filterModel.FechaFin;
        }

        var url = "https://localhost:7277/api/Ticket/FilterOrGetTicket?Hidden=0";
        var queryParams = new List<string>();

        // Filtros generales
        if (!string.IsNullOrEmpty(filterModel.Cedula))
            queryParams.Add($"Cedula={filterModel.Cedula}");

        if (!string.IsNullOrEmpty(filterModel.NoMulta))
        {
            string ticketIdStr = filterModel.NoMulta.Trim();
            if (int.TryParse(ticketIdStr, out var ticketId))
                queryParams.Add($"ticketId={ticketId}");
        }

        if (filterModel.FechaInicio.HasValue)
        {
            if (!filterModel.FechaFin.HasValue)
                filterModel.FechaFin = filterModel.FechaInicio;

            queryParams.Add($"FechaInicio={filterModel.FechaInicio.Value:dd/MM/yyyy}");
        }

        if (filterModel.FechaFin.HasValue)
            queryParams.Add($"FechaFin={filterModel.FechaFin.Value:dd/MM/yyyy}");

        if (filterModel.Infraccion.HasValue)
            queryParams.Add($"ArticuloInfringidoId={filterModel.Infraccion}");

        if (!string.IsNullOrEmpty(filterModel.NoAgente))
            queryParams.Add($"NoAgente={filterModel.NoAgente}");

        if (!string.IsNullOrEmpty(filterModel.Estado))
            queryParams.Add($"Estado={filterModel.Estado}");

        if (!string.IsNullOrEmpty(filterModel.Zona))
            queryParams.Add($"Zona={filterModel.Zona}");

        if (!string.IsNullOrEmpty(filterModel.IncidentLocation))
            queryParams.Add($"LugarHecho={filterModel.IncidentLocation}");

        if (!string.IsNullOrEmpty(filterModel.TipoDeVehiculo))
            queryParams.Add($"TipoVehiculoId={filterModel.TipoDeVehiculo}");



        if (!string.IsNullOrEmpty(filterModel.MarcaVehiculo))
            queryParams.Add($"Marca={filterModel.MarcaVehiculo}");

        // Agregar los parámetros a la URL
        if (queryParams.Any())
        {
            url += (url.Contains("?") ? "&" : "?") + string.Join("&", queryParams);
        }



        // Imprimir la URL generada en la consola
        Console.WriteLine("URL generada: " + url);

        try
        {
            var response = await Http.GetAsync(url);
            if (response.IsSuccessStatusCode)
            {
                var data = JsonConvert.DeserializeObject<List<Ticket>>(await response.Content.ReadAsStringAsync());

                if (data == null || !data.Any())
                {
                    filteredTickets = new List<Ticket>();
                    mostrarResultados = false;
                    mensajeNoResultados = "No se encontraron multas que coincidan con los filtros.";
                    mostrarMensaje = true;
                    StateHasChanged();

                    await Task.Delay(3000);
                    mensajeNoResultados = string.Empty;
                    mostrarMensaje = false;
                    StateHasChanged();
                }
                else
                {
                    filteredTickets = data;
                    mostrarResultados = true;
                    mensajeNoResultados = string.Empty;
                    mostrarMensaje = false;

                    await LoadBarChartData();
                    Console.WriteLine(barChartData.Count);
                    await LoadDonutChartData();
                    StateHasChanged();
                }
            }
            else if (response.StatusCode == HttpStatusCode.NotFound)
            {
                filteredTickets = new List<Ticket>();
                mostrarResultados = false;
                mensajeNoResultados = "No se encontraron multas que coincidan con los filtros.";
                mostrarMensaje = true;
                StateHasChanged();

                await Task.Delay(3000);
                mensajeNoResultados = string.Empty;
                mostrarMensaje = false;
                StateHasChanged();
            }
            else
            {
                mensajeNoResultados = "Hubo un error al intentar obtener los datos.";
                mostrarMensaje = true;
                StateHasChanged();

                await Task.Delay(3000);
                mensajeNoResultados = string.Empty;
                mostrarMensaje = false;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error: {ex.Message}");
            mensajeNoResultados = "Hubo un error al intentar obtener los datos.";
            mostrarMensaje = true;
            StateHasChanged();

            await Task.Delay(3000);
            mensajeNoResultados = string.Empty;
            mostrarMensaje = false;
            StateHasChanged();
        }
    }




    private void OnFilterr()
    {
        Console.WriteLine("Filtros aplicados:");
        Console.WriteLine($"Cédula: {filterModel.Cedula}");
        Console.WriteLine($"No. de Multa: {filterModel.NoMulta}");
        Console.WriteLine($"Fecha Inicio: {filterModel.FechaInicio}");
        Console.WriteLine($"Fecha Fin: {filterModel.FechaFin}");
        Console.WriteLine($"Infracción: {filterModel.Infraccion}");
        Console.WriteLine($"No. de Agente: {filterModel.NoAgente}");
        Console.WriteLine($"Estado: {filterModel.Estado}");
        Console.WriteLine($"Zona: {filterModel.Zona}");
        Console.WriteLine($"Lugar Hecho: {filterModel.IncidentLocation}");
        Console.WriteLine($"Tipo de Vehículo: {filterModel.TipoDeVehiculo}");
        Console.WriteLine($"Placa: {filterModel.Placavehiculo}");
        Console.WriteLine($"Marca: {filterModel.MarcaVehiculo}");
    }


    private void OnDateChange(DateTime? value)
    {
        StateHasChanged(); // Forzar la actualización de la UI
    }





    public class FilterModel
    {
        public string Cedula { get; set; }
        public string NoMulta { get; set; }
        public DateTime? FechaInicio { get; set; }
        public DateTime? FechaFin { get; set; }
        public int? Infraccion { get; set; }
        public string NoAgente { get; set; }
        public string Estado { get; set; }
        public string Zona { get; set; }
        public string TipoDeVehiculo { get; set; }
        public string Placavehiculo { get; set; }
        public string MarcaVehiculo { get; set; }
        public string IncidentLocation { get; set; }
    }

    public class Infraccion
    {
        public string Text { get; set; }
        public int? Value { get; set; }
    }

    public class Estado
    {
        public string Text { get; set; }
        public string? Value { get; set; }
    }

    public class TipoVehiculo
    {
        public string Text { get; set; }
        public string? Value { get; set; }
    }

    public class Tickett
    {
        public int TicketId { get; set; }
        public string Zone { get; set; }
        public string Name { get; set; }
        public string LastName { get; set; }
        public string Phone { get; set; }
        public string Email { get; set; }
        public string Identification { get; set; }
        public VehicleType VehicleType { get; set; }
        public string LicensePlate { get; set; }
        public string Brand { get; set; }
        public string Model { get; set; }
        public string IncidentLocation { get; set; }
        public string Observations { get; set; }
        public string AgentNumber { get; set; }
        public DateTime TicketDate { get; set; }
        public Article Articulo { get; set; }  // Asegúrate de tener la propiedad Articulo aquí
        public Agent Agente { get; set; }
        public int Hidden { get; set; }
        public string Status { get; set; }
    }


    public class VehicleType
    {
        public string Name { get; set; }
    }

    public class Article
    {
        public string ArticleNum { get; set; }
        public string Description { get; set; }
        public decimal Price { get; set; }
    }

    public class Agent
    {
        public string Name { get; set; }
        public string LastName { get; set; }
    }

    public class ApiResponse
    {
        [JsonPropertyName("$values")]
        public List<Ticket> Tickets { get; set; }
    }





    bool showDataLabels = false;

    private async Task export()
    {
        try
        {
            // Verificar que hay tickets filtrados
            if (filteredTickets == null || !filteredTickets.Any())
            {
                // Mostrar mensaje de error o notificación
                return;
            }

            // Obtener las fechas de los filtros
            string fechaInicio = filterModel.FechaInicio?.ToString("dd/MM/yyyy") ?? "Fecha no seleccionada";
            string fechaFin = filterModel.FechaFin?.ToString("dd/MM/yyyy") ?? "Fecha no seleccionada";

            // Preparar los datos para el PDF
            var ticketsData = filteredTickets.Select(t => new
            {
                ticketId = t.TicketId,
                ticketDate = t.TicketDate,
                identification = t.Identification,
                status = t.Status,
                articulo = new { price = t.Articulo.Price }
            }).ToList();

            // Llamar al generador de PDF y pasar las fechas de inicio y fin
            await JSRuntime.InvokeVoidAsync("GenerarPDFfinanciero", ticketsData, fechaInicio, fechaFin);
        }
        catch (Exception ex)
        {
            // Manejar errores
            Console.WriteLine($"Error generando PDF: {ex.Message}");
        }
    }



    private async Task Print()
    {
        await JSRuntime.InvokeVoidAsync("Print");

    }





    private string BuildQueryParams()
    {
        var queryParams = new List<string>();

        if (!string.IsNullOrEmpty(filterModel.Cedula))
            queryParams.Add($"Cedula={filterModel.Cedula}");

        if (!string.IsNullOrEmpty(filterModel.NoMulta))
        {
            string ticketIdStr = filterModel.NoMulta.Trim();
            if (int.TryParse(ticketIdStr, out var ticketId))
                queryParams.Add($"ticketId={ticketId}");
        }

        if (filterModel.FechaInicio.HasValue)
        {
            if (!filterModel.FechaFin.HasValue)
                filterModel.FechaFin = filterModel.FechaInicio;

            queryParams.Add($"FechaInicio={filterModel.FechaInicio.Value:dd/MM/yyyy}");
        }

        if (filterModel.FechaFin.HasValue)
            queryParams.Add($"FechaFin={filterModel.FechaFin.Value:dd/MM/yyyy}");

        if (filterModel.Infraccion.HasValue)
            queryParams.Add($"ArticuloInfringidoId={filterModel.Infraccion}");

        if (!string.IsNullOrEmpty(filterModel.NoAgente))
            queryParams.Add($"NoAgente={filterModel.NoAgente}");

        if (!string.IsNullOrEmpty(filterModel.Estado))
            queryParams.Add($"Estado={filterModel.Estado}");

        if (!string.IsNullOrEmpty(filterModel.Zona))
            queryParams.Add($"Zona={filterModel.Zona}");

        if (!string.IsNullOrEmpty(filterModel.IncidentLocation))
            queryParams.Add($"LugarHecho={filterModel.IncidentLocation}");

        if (!string.IsNullOrEmpty(filterModel.TipoDeVehiculo))
            queryParams.Add($"TipoVehiculoId={filterModel.TipoDeVehiculo}");

        if (!string.IsNullOrEmpty(filterModel.Placavehiculo))
            queryParams.Add($"PlacaVehiculo={filterModel.Placavehiculo}");

        if (!string.IsNullOrEmpty(filterModel.MarcaVehiculo))
            queryParams.Add($"Marca={filterModel.MarcaVehiculo}");

        // Aquí siempre agregamos Hidden=0
        queryParams.Add("Hidden=0");

        return string.Join("&", queryParams);
    }





    bool showDataLabelss = false;



    private List<DataItem> barChartData = new List<DataItem>();

    private async Task LoadBarChartData()
    {
        var baseUrl = "https://localhost:7277/api/Ticket/report/multas/montos";
        var queryParams = BuildQueryParams();

        var url = !string.IsNullOrEmpty(queryParams)
            ? baseUrl + "?" + queryParams
            : baseUrl;

        Console.WriteLine("URL Generada para Bar Chart: " + url);

        var response = await Http.GetStringAsync(url);
        var data = JsonConvert.DeserializeObject<MultasMontosResponse>(response);

        if (data != null)
        {
            barChartData = new List<DataItem>
    {
        new DataItem { Category = "Pagadas", Value = data.GetTotalPaidAmount() },
        new DataItem { Category = "Pendientes", Value = data.GetTotalPendingAmount() }
    };
        }

    }






    public class MultasMontosResponse
    {
        [JsonProperty("totalPaidAmount")]
        public string TotalPaidAmount { get; set; }

        [JsonProperty("totalPendingAmount")]
        public string TotalPendingAmount { get; set; }

        public decimal GetTotalPaidAmount() =>
            string.IsNullOrEmpty(TotalPaidAmount) ? 0 : ParseCurrency(TotalPaidAmount);

        public decimal GetTotalPendingAmount() =>
            string.IsNullOrEmpty(TotalPendingAmount) ? 0 : ParseCurrency(TotalPendingAmount);

        private decimal ParseCurrency(string currency)
        {
            if (string.IsNullOrWhiteSpace(currency))
                return 0;

            var cleanValue = currency.Replace("RD$", "").Replace(",", "").Trim();

            return decimal.TryParse(cleanValue, NumberStyles.Any, CultureInfo.InvariantCulture, out var result)
                ? result
                : 0;
        }
    }


    public class DataItem
    {
        public string Category { get; set; }
        public decimal Value { get; set; }
    }

    private List<DataItem> donutChartData = new List<DataItem>();
    private async Task LoadDonutChartData()
    {
        var baseUrl = "https://localhost:7277/api/Ticket/FilterGetPendientes-Pagadas";
        var queryParams = BuildQueryParams();

        var url = !string.IsNullOrEmpty(queryParams)
            ? baseUrl + "?" + queryParams
            : baseUrl;

        // Imprimir la URL generada para depurar
        Console.WriteLine("URL Generada para Donut Chart: " + url);

        var response = await Http.GetStringAsync(url);
        var data = JsonConvert.DeserializeObject<MultasCantidadResponse>(response);

        if (data != null)
        {
            donutChartData = new List<DataItem>
        {
            new DataItem { Category = "Pagadas", Value = data.GetPagadas() },
            new DataItem { Category = "Pendientes", Value = data.GetPendientes() }
        };
        }
    }





    public class MultasCantidadResponse
    {
        [JsonPropertyName("pagadas")]
        public int Pagadas { get; set; }

        [JsonPropertyName("pendientes")]
        public int Pendientes { get; set; }

        // Métodos para obtener las cantidades de manera directa
        public int GetPagadas() => Pagadas;

        public int GetPendientes() => Pendientes;
    }



}