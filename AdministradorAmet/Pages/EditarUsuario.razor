@page "/editarUsuario/{Cedula}"

@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject Radzen.DialogService DialogService
@using System.Text.RegularExpressions;
@inject IModalService Modal
@using Newtonsoft.Json;
@using AdministradorAmet.Models

<div class="container">
    <div class="header">
        <h1 class="title">Editar Usuario</h1>
    </div>

    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@500&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@500&display=swap" rel="stylesheet">

    <hr class="divider" />



    <div class="central-section">
        <div class="image-section">
            <div class="profile-image-container">
                <img src="imagenes/usuario.png" alt="Imagen de perfil" class="profile-image" id="previewImagenPerfil" disable />
            </div>
            @* <div class="image-input">
                <InputFile OnChange="ImagenPerfilSeleccionada" />
            </div> *@
        </div>
    </div>

    @if (alertaVisible)
    {
        <RadzenAlert Title="Éxito" AlertStyle="AlertStyle.Success" Visible="true" Variant="Radzen.Variant.Flat" Shade="Shade.Lighter" Icon="info">
            Usuario Actualizado Correctamente.
        </RadzenAlert>
    }

    @if (errorVisible)
    {
        <RadzenAlert Title="Error" AlertStyle="AlertStyle.Danger" Visible="true" Variant="Radzen.Variant.Flat" Shade="Shade.Lighter" Icon="error">
            No se pudo Actualizar el usuario.
        </RadzenAlert>
    }
    <hr class="divider" />
    <!-- Información Personal -->


    <div class="inputs-grid">
        <div class="input-group">
            <label for="inputNombre">Nombre</label>
            <input id="inputNombre" type="text" class="form-input" @bind="name" />
            @if (!string.IsNullOrEmpty(nameError))
            {
                <span class="error-message">@nameError</span>
            }
        </div>

        <div class="input-group">
            <label for="inputApellido">Apellido</label>
            <input id="inputApellido" type="text" class="form-input" @bind="lastname" />
            @if (!string.IsNullOrEmpty(lastnameError))
            {
                <span class="error-message">@lastnameError</span>
            }
        </div>

        <div class="input-group">
            <label for="inputTelefono">Teléfono</label>
            <input id="inputTelefono" type="text" class="form-input" maxlength="10" @bind="phone" />
            @if (!string.IsNullOrEmpty(phoneError))
            {
                <span class="error-message">@phoneError</span>
            }
        </div>

        <div class="input-group">
            <label for="inputPassword">Contraseña</label>
            <div class="password-container">
                <input id="inputPassword"  class="form-input"  disabled/>
                <button type="button" class="password-toggle " >
                    👁
                </button>
            </div>

        </div>

        <div class="input-group">
            <label for="inputSexo">Sexo</label>
            <select id="inputSexo" class="form-select" @bind="genderId">
                <option value="" selected disabled>Seleccionar</option>
                <option value="1">Masculino</option>
                <option value="2">Femenino</option>
                <option value="3">Otros</option>
            </select>
            @if (!string.IsNullOrEmpty(genderError))
            {
                <span class="error-message">@genderError</span>
            }
        </div>

        <div class="input-group">
            <label for="inputEmail">Email</label>
            <input id="inputEmail" type="email" class="form-input" @bind="email" />
            @if (!string.IsNullOrEmpty(emailError))
            {
                <span class="error-message">@emailError</span>
            }
        </div>

        <div class="input-group">
            <label for="inputNoAgente">No. Agente</label>
            <input id="inputNoAgente" type="text" class="form-input" @bind="noAgente" />
        </div>

        <div class="input-group">
            <label for="inputEstatura">Estatura (metros)</label>
            <input id="inputEstatura" type="number" step="0.01" class="form-input" @bind="height" />
        </div>

        <div class="input-group">
            <label for="inputFechaNacimiento">Fecha de Nacimiento</label>
            <input id="inputFechaNacimiento" type="date" class="form-input" @bind="birthdate" />
            @if (!string.IsNullOrEmpty(birthdateError))
            {
                <span class="error-message">@birthdateError</span>
            }
        </div>

        <div class="input-group">
            <label for="inputTipoSangre">Tipo de Sangre</label>
            <select id="inputTipoSangre" class="form-select" @bind="bloodTypeId">
                <option value="" selected disabled>Seleccionar</option>
                <option value="1">A+</option>
                <option value="2">A-</option>
                <option value="3">B+</option>
                <option value="4">B-</option>
                <option value="5">O+</option>
                <option value="6">O-</option>
                <option value="7">AB+</option>
                <option value="8">AB-</option>
            </select>
        </div>



        <div class="input-group">
            <label for="inputEstadoCivil">Estado Civil</label>
            <select id="inputEstadoCivil" class="form-select" @bind="civilStatusId">
                <option value="" selected disabled>Seleccionar</option>
                <option value="1">Soltero</option>
                <option value="2">Casado</option>
                <option value="3">Divorciado</option>
                <option value="4">Viudo</option>
            </select>
        </div>


        <div class="input-group">
            <label for="inputLugarTrabajo">Lugar de Trabajo</label>
            <select id="inputLugarTrabajo" class="form-select" @bind="workLocationId">
                <option value="" selected disabled>Seleccionar</option>
                <option value="1">Azua</option>
                <option value="2">Bahoruco</option>
                <option value="3">Barahona</option>
                <option value="4">Dajabon</option>
                <option value="5">Distrito Nacional</option>
                <option value="6">Duarte</option>
                <option value="7">El Seybo</option>
                <option value="8">Elias Piña</option>
                <option value="9">Espaillat</option>
                <option value="10">Hato Mayor</option>
                <option value="11">Hermanas Mirabal</option>
                <option value="12">Independencia</option>
                <option value="13">La Altagracia</option>
                <option value="14">La Romana</option>
                <option value="15">La Vega</option>
                <option value="16">Maria Trinidad Sanchez</option>
                <option value="17">Monseñor Nouel</option>
                <option value="18">Monte Plata</option>
                <option value="19">Montecristi</option>
                <option value="20">Pedernales</option>
                <option value="21">Peravia</option>
                <option value="22">Puerto Plata</option>
                <option value="23">Samana</option>
                <option value="24">San Cristobal</option>
                <option value="25">San Jose de Ocoa</option>
                <option value="26">San Juan</option>
                <option value="27">San Pedro de Macoris</option>
                <option value="28">Sanchez Ramirez</option>
                <option value="29">Santiago</option>
                <option value="30">Santiago Rodriguez</option>
                <option value="31">Santo Domingo</option>
                <option value="32">Valverde</option>
            </select>
        </div>
    </div>

    <div class="buttons">
        <button class="cancel-button" @onclick="Cancelar">Cancelar</button>
        <button class="create-button" @onclick="ConfirmarActualizacion">Guardar</button>
    </div>
</div>



@code {
    [Parameter]
    public string Cedula { get; set; }
    private string profileImgPreview { get; set; } = string.Empty; // Guardará el dataUrl para la vista previa
    private string name { get; set; } = string.Empty;
    private string lastname { get; set; } = string.Empty;
    private string phone { get; set; } = string.Empty;
    private string noAgente { get; set; } = string.Empty;
    private string email { get; set; } = string.Empty;
    private decimal? height { get; set; }
    private DateTime? birthdate { get; set; }
    private int? genderId { get; set; }
    private int? bloodTypeId { get; set; }
    private int? civilStatusId { get; set; }
    private int? workLocationId { get; set; }
    private string profileImg { get; set; } = string.Empty; // Guardará el nombre del archivo
    bool alertaVisible = false;
    bool errorVisible = false;
    private string Role { get; set; }
    private string nameError { get; set; }
    private string lastnameError { get; set; }
    private string cedulaError { get; set; }
    private string phoneError { get; set; }
    private string noAgenteError { get; set; }
    private string genderError { get; set; }
    private string birthdateError { get; set; }
    private string emailError { get; set; }
    // Declaración de las variables necesarias
    private string gender = string.Empty;
    private string bloodType = string.Empty;
    private string civilStatus = string.Empty;
    private string workLocation = string.Empty;


    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(Cedula))
        {
            await CargarUsuarioParaEdicion(Cedula);
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("alert", "Cédula no proporcionada.");
        }
        Console.WriteLine($"Cédula enviada para actualización: {Cedula}");

    }


    private async Task CargarUsuarioParaEdicion(string cedula)
    {
        try
        {
            string urlCompleta = $"https://localhost:7277/api/User/{cedula}";
            var usuario = await Http.GetFromJsonAsync<User>(urlCompleta);

            if (usuario != null)
            {
                // Asignar los valores del usuario a las variables del formulario
                name = usuario.Name;
                lastname = usuario.LastName;
                Cedula = usuario.Cedula;
                phone = usuario.Phone ?? string.Empty;
                email = usuario.email ?? string.Empty;
                noAgente = usuario.NoAgente ?? string.Empty;
                height = usuario.height.HasValue ? (decimal?)usuario.height.Value : null;

                // Convertir birthdate de string a DateTime?
                if (DateTime.TryParse(usuario.birthdate, out DateTime parsedDate))
                {
                    birthdate = parsedDate;
                }
                else
                {
                    birthdate = null; // O puedes asignar una fecha predeterminada si lo prefieres
                }

                // Asignar los valores de las relaciones directamente sin conversión
                gender = usuario.Gender ?? string.Empty;
                bloodType = usuario.bloodType ?? string.Empty;
                civilStatus = usuario.CivilStatus ?? string.Empty;
                workLocation = usuario.workLocation ?? string.Empty;

                // Imagen de perfil si existe
                profileImgPreview = usuario.profileImg ?? string.Empty;

                // Asignación de ID según las relaciones
                genderId = usuario.Gender switch
                {
                    "Masculino" => 1,
                    "Femenino" => 2,
                    "Otros" => 3,
                    _ => null
                };

                bloodTypeId = usuario.bloodType switch
                {
                    "A+" => 1,
                    "A-" => 2,
                    "B+" => 3,
                    "B-" => 4,
                    "O+" => 5,
                    "O-" => 6,
                    "AB+" => 7,
                    "AB-" => 8,
                    _ => null
                };

                civilStatusId = usuario.CivilStatus switch
                {
                    "soltero" => 1,
                    "casado" => 2,
                    "divorciado" => 3,
                    "viudo" => 4,
                    _ => null // En caso de que no sea un valor conocido, se deja como null
                };

                workLocationId = workLocation switch
                {
                    "Azua" => 1,
                    "Bahoruco" => 2,
                    "Barahona" => 3,
                    "Dajabon" => 4,
                    "Distrito Nacional" => 5,
                    "Duarte" => 6,
                    "El Seybo" => 7,
                    "Elias Piña" => 8,
                    "Espaillat" => 9,
                    "Hato Mayor" => 10,
                    "Hermanas Mirabal" => 11,
                    "Independencia" => 12,
                    "La Altagracia" => 13,
                    "La Romana" => 14,
                    "La Vega" => 15,
                    "Maria Trinidad Sanchez" => 16,
                    "Monseñor Nouel" => 17,
                    "Monte Plata" => 18,
                    "Montecristi" => 19,
                    "Pedernales" => 20,
                    "Peravia" => 21,
                    "Puerto Plata" => 22,
                    "Samana" => 23,
                    "San Cristobal" => 24,
                    "San Jose de Ocoa" => 25,
                    "San Juan" => 26,
                    "San Pedro de Macoris" => 27,
                    "Sanchez Ramirez" => 28,
                    "Santiago" => 29,
                    "Santiago Rodriguez" => 30,
                    "Santo Domingo" => 31,
                    "Valverde" => 32,
                    _ => null
                };

                // Actualizar la vista
                StateHasChanged();
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Usuario no encontrado.");
            }
        }
        catch (HttpRequestException httpEx)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error de solicitud HTTP: {httpEx.Message}");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error al cargar datos del usuario: {ex.Message}");
        }
    }


    private async Task ConfirmarActualizacion()
    {
        // Usar await directamente y obtener el resultado nullable
        bool? confirmar = await DialogService.Confirm(
            "¿Estás seguro de que deseas actualizar este usuario?",
            "Confirmar Actualización",
            new ConfirmOptions() { OkButtonText = "Sí", CancelButtonText = "No" }
        );

        // Convertir el nullable a bool (si es null se considera false)
        if (confirmar ?? false)
        {
            await ActualizarUsuario();
        }
    }

    private async Task ActualizarUsuario()
    {
        bool isValid = true;
        string emailPattern = @"^[^@\s]+@[^@\s]+\.[^@\s]+$";

        // Validar los campos con mensajes más detallados
        if (string.IsNullOrWhiteSpace(name))
        {
            nameError = "El nombre es obligatorio.";
            isValid = false;
        }
        if (string.IsNullOrWhiteSpace(lastname))
        {
            lastnameError = "El apellido es obligatorio.";
            isValid = false;
        }
        if (string.IsNullOrWhiteSpace(phone))
        {
            phoneError = "El número de teléfono es obligatorio.";
            isValid = false;
        }
        else if (phone.Length != 10 || !phone.All(char.IsDigit))
        {
            phoneError = "El número de teléfono inválido.";
            isValid = false;
        }
        if (string.IsNullOrWhiteSpace(email))
        {
            emailError = "El correo electrónico es obligatorio.";
            isValid = false;
        }
        else if (!Regex.IsMatch(email, emailPattern))
        {
            emailError = "El correo electrónico no tiene un formato válido. Ejemplo: usuario@dominio.com";
            isValid = false;
        }

        if (!isValid) return;

        // Crear el objeto usuario sin la contraseña
        var usuario = new User
            {
                Cedula = Cedula,
                Name = name.Trim(),
                LastName = lastname.Trim(),
                email = string.IsNullOrWhiteSpace(email) ? null : email.Trim(),
                Phone = string.IsNullOrWhiteSpace(phone) ? null : phone.Trim(),
                profileImg = string.IsNullOrWhiteSpace(profileImg) ? null : profileImg.Trim(),
                Gender = genderId.HasValue ? genderId.ToString() : null,
                bloodType = bloodTypeId.HasValue ? bloodTypeId.ToString() : null,
                CivilStatus = civilStatusId.HasValue ? civilStatusId.ToString() : null,
                workLocation = workLocationId.HasValue ? workLocationId.ToString() : null,
                Password = null, // No se enviará la contraseña
                height = height.HasValue ? (double?)height.Value : null, // Conversión explícita de decimal? a double?
                birthdate = birthdate.HasValue ? birthdate.Value.ToString("yyyy-MM-dd") : null,
                NoAgente = string.IsNullOrWhiteSpace(noAgente) ? null : noAgente.Trim()
            };


        Console.WriteLine($"Usuario a enviar: {JsonConvert.SerializeObject(usuario)}");

        try
        {
            var response = await Http.PutAsJsonAsync($"https://localhost:7277/api/User/UpdateAgent-Admin/{Cedula}", usuario);

            if (response.IsSuccessStatusCode)
            {
                await MostrarAlerta(true);
                Console.WriteLine("Actualización exitosa");

                // Obtener los datos del usuario para determinar el rol
                var userResponse = await Http.GetAsync($"https://localhost:7277/api/User/{Cedula}");
                if (userResponse.IsSuccessStatusCode)
                {
                    var userData = await userResponse.Content.ReadFromJsonAsync<User>();
                    var userRole = userData?.Role;

                    if (userRole == "Administrador")
                    {
                        Console.WriteLine("Redirigiendo al perfil del administrador");
                        NavigationManager.NavigateTo($"/perfilAdministrador/{Cedula}");
                    }
                    else if (userRole == "Agente")
                    {
                        Console.WriteLine("Redirigiendo al perfil del agente");
                        NavigationManager.NavigateTo($"/perfilAgente/{Cedula}");
                    }
                }
                else
                {
                    Console.WriteLine("Error al obtener los datos del usuario");
                    await MostrarAlerta(false);
                }
            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Error en la actualización: {errorMessage}");
                await JSRuntime.InvokeVoidAsync("alert", $"Error al actualizar usuario. Código: {response.StatusCode}, Mensaje: {errorMessage}");
                await MostrarAlerta(false);
            }
        }
        catch (HttpRequestException httpEx)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error de solicitud HTTP: {httpEx.Message}");
            await MostrarAlerta(false);
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error al actualizar el usuario: {ex.Message}");
            await MostrarAlerta(false);
        }
    }

    private async Task Cancelar()
    {
        await JSRuntime.InvokeVoidAsync("window.history.back");
    }
    // Función para manejar la selección de la imagen
    private async Task ImagenPerfilSeleccionada(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file is not null)
        {
            // Solo almacenamos el nombre del archivo
            profileImg = file.Name;

            // Generar el dataUrl para la vista previa
            using var memoryStream = new MemoryStream();
            await file.OpenReadStream().CopyToAsync(memoryStream);
            var base64 = Convert.ToBase64String(memoryStream.ToArray());
            profileImgPreview = $"data:{file.ContentType};base64,{base64}";

            // Llamar a la función JavaScript para actualizar la vista previa de la imagen
            await JSRuntime.InvokeVoidAsync("setImagePreview", "#previewImagenPerfil", profileImgPreview);
        }
    }

    async Task MostrarAlerta(bool exito)
    {
        if (exito)
        {
            alertaVisible = true;
            errorVisible = false;
        }
        else
        {
            alertaVisible = false;
            errorVisible = true;
        }

        StateHasChanged(); // Actualiza la UI inmediatamente para que la alerta sea visible

        await Task.Delay(2000); // Muestra la alerta durante 3 segundos

        alertaVisible = false;
        errorVisible = false;

        StateHasChanged(); // Vuelve a actualizar la UI
    }
}






