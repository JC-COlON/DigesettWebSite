@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject Radzen.DialogService DialogService
@using System.Text.RegularExpressions;
@inject IModalService Modal

<PageTitle>Administrador Digesett - Crear Usuario</PageTitle>
@page "/editarUsuario"

<link href="https://fonts.googleapis.com/css2?family=Roboto:wght@500&display=swap" rel="stylesheet">
<link href="https://fonts.googleapis.com/css2?family=Poppins:wght@500&display=swap" rel="stylesheet">







<div class="container">
    <div class="header">
        <h1 class="title">Editar Usuario</h1>
    </div>
  
    <hr class="divider" />
    <!-- Sección de imagen -->
    <div class="image-section">
        <!-- Vista previa de la imagen -->
        <div class="profile-image-container">
            <img src="imagenes/usuario.png" alt="Imagen de perfil" class="profile-image" id="previewImagenPerfil" />
        </div>

        <!-- Entrada para subir imagen -->
        <div class="image-input">
            <InputFile OnChange="ImagenPerfilSeleccionada"  />
        </div>
    </div>





    <hr class="divider" />


    @if (alertaVisible)
    {
        <RadzenAlert Title="Éxito" AlertStyle="AlertStyle.Success" Visible="true" Variant="Radzen.Variant.Flat" Shade="Shade.Lighter" Icon="info">
            Usuario Actualizado Correctamente.
        </RadzenAlert>
    }

    @if (errorVisible)
    {
        <RadzenAlert Title="Error" AlertStyle="AlertStyle.Danger" Visible="true" Variant="Radzen.Variant.Flat" Shade="Shade.Lighter" Icon="error">
            No se pudo Actualizar el usuario.
        </RadzenAlert>
    }



    <div class="inputs-grid">
       



        <!-- Campos de entrada -->
        <div class="input-group">
            <label for="inputNombre">Nombre</label>
            <input id="inputNombre" type="text" class="form-input" @bind="name"  />
            @if (!string.IsNullOrEmpty(nameError))
            {
                <span class="error-message">@nameError</span>
            }
        </div>

        <div class="input-group">
            <label for="inputApellido">Apellido</label>
            <input id="inputApellido" type="text" class="form-input" @bind="lastname"  />
            @if (!string.IsNullOrEmpty(lastnameError))
            {
                <span class="error-message">@lastnameError</span>
            }
        </div>

        <div class="input-group">
            <label for="inputCedula">Cédula</label>
            <input id="inputCedula" type="text" class="form-input" maxlength="11" @bind="Cedula"  />
            @if (!string.IsNullOrEmpty(cedulaError))
            {
                <span class="error-message">@cedulaError</span>
            }
        </div>

        <div class="input-group">
            <label for="inputTelefono">Teléfono</label>
            <input id="inputTelefono" type="text" class="form-input" maxlength="10" @bind="phone"  />
            @if (!string.IsNullOrEmpty(phoneError))
            {
                <span class="error-message">@phoneError</span>
            }
        </div>
    
        <div class="input-group">
            <label for="inputSexo">Sexo</label>
            <select id="inputSexo" class="form-select" @bind="genderId" >
                <option value="" selected disabled>Seleccionar</option>
                <option value="1">Masculino</option>
                <option value="2">Femenino</option>
                <option value="3">Otros</option>
            </select>
            @if (!string.IsNullOrEmpty(genderError))
            {
                <span class="error-message">@genderError</span>
            }
        </div>

        <div class="input-group">
            <label for="inputEmail">Email</label>
            <input id="inputEmail" type="email" class="form-input" @bind="email"  />
            @if (!string.IsNullOrEmpty(emailError))
            {
                <span class="error-message">@emailError</span>
            }
        </div>

        <div class="input-group">
            <label for="inputNoAgente">No. Agente</label>
            <input id="inputNoAgente" type="text" class="form-input" @bind="noAgente"  />
            @if (!string.IsNullOrEmpty(noAgenteError))
            {
                <span class="error-message">@noAgenteError</span>
            }
        </div>



        <div class="input-group">
            <label for="inputEstatura">Estatura (metros)</label>
            <input id="inputEstatura" type="number" step="0.01" class="form-input" @bind="height"  />
        </div>

        <div class="input-group">
            <label for="inputFechaNacimiento">Fecha de Nacimiento</label>
            <input id="inputFechaNacimiento" type="date" class="form-input" @bind="birthdate"  />
            @if (!string.IsNullOrEmpty(birthdateError))
            {
                <span class="error-message">@birthdateError</span>
            }
        </div>

        <div class="input-group">
            <label for="inputTipoSangre">Tipo de Sangre</label>
            <select id="inputTipoSangre" class="form-select" @bind="bloodTypeId" >
                <option value="" selected disabled>Seleccionar</option>
                <option value="1">A+</option>
                <option value="2">A-</option>
                <option value="3">B+</option>
                <option value="4">B-</option>
                <option value="5">O+</option>
                <option value="6">O-</option>
                <option value="7">AB+</option>
                <option value="8">AB-</option>
            </select>
        </div>
        <div class="input-group">
            <label for="inputEstadoCivil">Estado Civil</label>
            <select id="inputEstadoCivil" class="form-select" @bind="civilStatusId" >
                <option value="" selected disabled>Seleccionar</option>
                <option value="1">Soltero</option>
                <option value="2">Casado</option>
                <option value="3">Divorciado</option>
                <option value="4">Viudo</option>
            </select>
        </div>

        <div class="input-group">
            <label for="inputLugarTrabajo">Lugar de Trabajo</label>
            <select id="inputLugarTrabajo" class="form-select" @bind="workLocationId" >
                <option value="" selected disabled>Seleccionar</option>
                <option value="1">Azua</option>
                <option value="2">Bahoruco</option>
                <option value="3">Barahona</option>
                <option value="4">Dajabon</option>
                <option value="5">Distrito Nacional</option>
                <option value="6">Duarte</option>
                <option value="7">El Seybo</option>
                <option value="8">Elias Piña</option>
                <option value="9">Espaillat</option>
                <option value="10">Hato Mayor</option>
                <option value="11">Hermanas Mirabal</option>
                <option value="12">Independencia</option>
                <option value="13">La Altagracia</option>
                <option value="14">La Romana</option>
                <option value="15">La Vega</option>
                <option value="16">Maria Trinidad Sanchez</option>
                <option value="17">Monseñor Nouel</option>
                <option value="18">Monte Plata</option>
                <option value="19">Montecristi</option>
                <option value="20">Pedernales</option>
                <option value="21">Peravia</option>
                <option value="22">Puerto Plata</option>
                <option value="23">Samana</option>
                <option value="24">San Cristobal</option>
                <option value="25">San Jose de Ocoa</option>
                <option value="26">San Juan</option>
                <option value="27">San Pedro de Macoris</option>
                <option value="28">Sanchez Ramirez</option>
                <option value="29">Santiago</option>
                <option value="30">Santiago Rodriguez</option>
                <option value="31">Santo Domingo</option>
                <option value="32">Valverde</option>
            </select>
        </div>
    </div>

    <div class="buttons">
        <button class="cancel-button" @onclick="Cancelar">Cancelar</button>
        <button class="create-button" @onclick="CrearUsuario">Crear</button>
    </div>
</div>

@code {
    private const string ApiUrl = "https://localhost:7277/api/UserAccess/Create"; // URL de la API
    private string profileImgPreview { get; set; } = string.Empty; // Guardará el dataUrl para la vista previa
    private string name { get; set; } = string.Empty;
    private string lastname { get; set; } = string.Empty;
    private string Cedula { get; set; } = string.Empty;
    private string phone { get; set; } = string.Empty;
    private string noAgente { get; set; } = string.Empty;
    private string password { get; set; } = string.Empty;
    private string email { get; set; } = string.Empty;
    private decimal? height { get; set; }
    private DateTime? birthdate { get; set; }
    private int? genderId { get; set; }
    private int? bloodTypeId { get; set; }
    private int? civilStatusId { get; set; }
    private int? workLocationId { get; set; }
    private string profileImg { get; set; } = string.Empty; // Guardará el nombre del archivo
    bool alertaVisible = false;
    bool errorVisible = false;
    private string PasswordFieldType { get; set; } = "password";
    private string PasswordToggleClass { get; set; } = "toggle-hidden";

    private string nameError { get; set; }
    private string lastnameError { get; set; }
    private string cedulaError { get; set; }
    private string phoneError { get; set; }
    private string noAgenteError { get; set; }
    private string genderError { get; set; }
    private string passwordError { get; set; }
    private string birthdateError { get; set; }
    private string emailError { get; set; }

    // Función que cambia la visibilidad de la contraseña
    private void TogglePasswordField()
    {
        if (PasswordFieldType == "password")
        {
            PasswordFieldType = "text";   // La contraseña se hace visible
            PasswordToggleClass = "toggle-visible"; // Cambia la clase a verde
        }
        else
        {
            PasswordFieldType = "password"; // La contraseña se oculta
            PasswordToggleClass = "toggle-hidden"; // Vuelve a la clase negra
        }
    }

    private string GetToggleClass() => PasswordFieldType == "password" ? "toggle-off" : "toggle-on";

    private async Task CrearUsuario()
    {
        // Validaciones
        bool isValid = true;
        string emailPattern = @"^[^@\s]+@[^@\s]+\.[^@\s]+$";

        if (string.IsNullOrWhiteSpace(name))
        {
            nameError = "El nombre es obligatorio.";
            isValid = false;
        }
        else
        {
            nameError = null;
        }

        if (string.IsNullOrWhiteSpace(lastname))
        {
            lastnameError = "El apellido es obligatorio.";
            isValid = false;
        }
        else
        {
            lastnameError = null;
        }

        if (string.IsNullOrWhiteSpace(Cedula))
        {
            cedulaError = "La cédula es obligatoria.";
            isValid = false;
        }
        else if (Cedula.Length != 11 || !Cedula.All(char.IsDigit))
        {
            cedulaError = "Cédula inválida.";
            isValid = false;
        }
        else
        {
            cedulaError = null;
        }

        if (string.IsNullOrWhiteSpace(phone))
        {
            phoneError = "El teléfono es obligatorio.";
            isValid = false;
        }
        else if (phone.Length != 10 || !phone.All(char.IsDigit))
        {
            phoneError = "Número de teléfono inválido.";
            isValid = false;
        }
        else
        {
            phoneError = null;
        }

        if (string.IsNullOrWhiteSpace(noAgente))
        {
            noAgenteError = "El número de agente es obligatorio.";
            isValid = false;
        }
        else
        {
            noAgenteError = null;
        }

        if (!genderId.HasValue)
        {
            genderError = "El sexo es obligatorio.";
            isValid = false;
        }
        else
        {
            genderError = null;
        }

        if (birthdate.HasValue && (DateTime.Now.Year - birthdate.Value.Year) < 18)
        {
            birthdateError = "El usuario debe ser mayor de 18 años.";
            isValid = false;
        }
        else
        {
            birthdateError = null;
        }

        if (string.IsNullOrWhiteSpace(email))
        {
            emailError = "El correo electrónico es obligatorio.";
            isValid = false;
        }
        else if (!Regex.IsMatch(email, emailPattern))
        {
            emailError = "El correo electrónico no tiene un formato válido.";
            isValid = false;
        }
        else
        {
            emailError = null;
        }

        if (!isValid)
        {
            return;
        }

        var usuario = new
        {
            cedula = Cedula,
            name = name,
            lastname = lastname,
            password = string.IsNullOrWhiteSpace(password) ? null : password,
            email = string.IsNullOrWhiteSpace(email) ? null : email,
            phone = string.IsNullOrWhiteSpace(phone) ? null : phone,
            profileImg = string.IsNullOrWhiteSpace(profileImg) ? null : profileImg, // Enviar solo el nombre del archivo de la imagen
            nacionalityId = (int?)null,
            birthdate = birthdate.HasValue ? birthdate.Value.ToString("yyyy-MM-dd") : null, // Formato de fecha esperado en la API
            genderId = genderId, // Debería ser un valor numérico (1, 2, 3)
            bloodTypeId = bloodTypeId, // Debería ser un valor numérico (1-8)
            height = height.HasValue ? height.Value : (decimal?)null, // Si está vacío, enviar null
            workLocationId = workLocationId, // Este también debería ser un valor numérico
            civilStatusId = civilStatusId, // Lo mismo para el estado civil
            noAgente = string.IsNullOrWhiteSpace(noAgente) ? null : noAgente, // Si es un campo vacío, enviarlo como null
            statusId = 1 // Este siempre será 1 según lo especificado
        };

        try
        {
            var response = await Http.PostAsJsonAsync(ApiUrl, usuario);
            Console.WriteLine(response); // Agrega esto para ver la respuesta del servidor
            if (response.IsSuccessStatusCode)
            {
                await MostrarAlerta(true);
                NavigationManager.NavigateTo("/Usuarios");
            }
            else
            {
                await MostrarAlerta(false);
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error al crear usuario: {ex.Message}");
            Console.WriteLine($"Error al crear usuario: {ex}");
        }
    }

    private void Cancelar()
    {
        NavigationManager.NavigateTo("/usuarios");
    }

    // Función para manejar la selección de la imagen
    private async Task ImagenPerfilSeleccionada(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file is not null)
        {
            // Solo almacenamos el nombre del archivo
            profileImg = file.Name;

            // Generar el dataUrl para la vista previa
            using var memoryStream = new MemoryStream();
            await file.OpenReadStream().CopyToAsync(memoryStream);
            var base64 = Convert.ToBase64String(memoryStream.ToArray());
            profileImgPreview = $"data:{file.ContentType};base64,{base64}";

            // Llamar a la función JavaScript para actualizar la vista previa de la imagen
            await JSRuntime.InvokeVoidAsync("setImagePreview", "#previewImagenPerfil", profileImgPreview);
        }
    }

    async Task MostrarAlerta(bool exito)
    {
        if (exito)
        {
            alertaVisible = true;
            errorVisible = false;
        }
        else
        {
            alertaVisible = false;
            errorVisible = true;
        }

        StateHasChanged(); // Actualiza la UI inmediatamente para que la alerta sea visible

        await Task.Delay(2000); // Muestra la alerta durante 3 segundos

        alertaVisible = false;
        errorVisible = false;

        StateHasChanged(); // Vuelve a actualizar la UI
    }
}






