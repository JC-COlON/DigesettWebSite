@page "/editarUsuario/{Cedula}"

@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject Radzen.DialogService DialogService
@using System.Text.RegularExpressions;
@inject IModalService Modal
@using Newtonsoft.Json;
@using AdministradorAmet.Models

<div class="container">
    <div class="header">
        <h1 class="title">Editar Usuario</h1>
    </div>

    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@500&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@500&display=swap" rel="stylesheet">

    <hr class="divider" />



    <div class="central-section">
        <div class="image-section">
            <div class="profile-image-container">
                <img src="imagenes/usuario.png" alt="Imagen de perfil" class="profile-image" id="previewImagenPerfil" disable />
            </div>
            @* <div class="image-input">
                <InputFile OnChange="ImagenPerfilSeleccionada" />
            </div> *@
        </div>
    </div>

    @if (alertaVisible)
    {
        <RadzenAlert Title="Éxito" AlertStyle="AlertStyle.Success" Visible="true" Variant="Radzen.Variant.Flat" Shade="Shade.Lighter" Icon="info">
            Usuario Actualizado Correctamente.
        </RadzenAlert>
    }

    @if (errorVisible)
    {
        <RadzenAlert Title="Error" AlertStyle="AlertStyle.Danger" Visible="true" Variant="Radzen.Variant.Flat" Shade="Shade.Lighter" Icon="error">
            No se pudo Actualizar el usuario.
        </RadzenAlert>
    }
    <hr class="divider" />
    <!-- Información Personal -->


    <div class="inputs-grid">
        <div class="input-group">
            <label for="inputNombre">Nombre</label>
            <input id="inputNombre" type="text" class="form-input" @bind="name" />
            @if (!string.IsNullOrEmpty(nameError))
            {
                <span class="error-message">@nameError</span>
            }
        </div>

        <div class="input-group">
            <label for="inputApellido">Apellido</label>
            <input id="inputApellido" type="text" class="form-input" @bind="lastname" />
            @if (!string.IsNullOrEmpty(lastnameError))
            {
                <span class="error-message">@lastnameError</span>
            }
        </div>

        <div class="input-group">
            <label for="inputTelefono">Teléfono</label>
            <input id="inputTelefono" type="text" class="form-input" maxlength="10" @bind="phone" />
            @if (!string.IsNullOrEmpty(phoneError))
            {
                <span class="error-message">@phoneError</span>
            }
        </div>

        <div class="input-group">
            <label for="inputPassword">Contraseña</label>
            <div class="password-container">
                <input id="inputPassword"  class="form-input"  disabled/>
                <button type="button" class="password-toggle " >
                    👁
                </button>
            </div>

        </div>

        <div class="input-group">
            <label for="inputSexo">Sexo</label>
            <select id="inputSexo" class="form-select" @bind="genderId">
                <option value="" selected disabled>Seleccionar</option>
                <option value="1">Masculino</option>
                <option value="2">Femenino</option>
                
            </select>
            @if (!string.IsNullOrEmpty(genderError))
            {
                <span class="error-message">@genderError</span>
            }
        </div>

        <div class="input-group">
            <label for="inputEmail">Email</label>
            <input id="inputEmail" type="email" class="form-input" @bind="email" />
            @if (!string.IsNullOrEmpty(emailError))
            {
                <span class="error-message">@emailError</span>
            }
        </div>

        <div class="input-group">
            <label for="inputNoAgente">No. Agente</label>
            <input id="inputNoAgente" type="text" class="form-input" @bind="noAgente" />
        </div>

        <div class="input-group">
            <label for="inputEstatura">Estatura (metros)</label>
            <input id="inputEstatura" type="number" step="0.01" class="form-input" @bind="height" />
        </div>

        <div class="input-group">
            <label for="inputFechaNacimiento">Fecha de Nacimiento</label>
            <input id="inputFechaNacimiento" type="date" class="form-input" @bind="birthdate" />
            @if (!string.IsNullOrEmpty(birthdateError))
            {
                <span class="error-message">@birthdateError</span>
            }
        </div>

        <div class="input-group">
            <label for="inputTipoSangre">Tipo de Sangre</label>
            <select id="inputTipoSangre" class="form-select" @bind="bloodTypeId">
                <option value="" selected disabled>Seleccionar</option>
                <option value="1">A+</option>
                <option value="2">A-</option>
                <option value="3">B+</option>
                <option value="4">B-</option>
                <option value="5">O+</option>
                <option value="6">O-</option>
                <option value="7">AB+</option>
                <option value="8">AB-</option>
            </select>
        </div>



        <div class="input-group">
            <label for="inputEstadoCivil">Estado Civil</label>
            <select id="inputEstadoCivil" class="form-select" @bind="civilStatusId">
                <option value="" selected disabled>Seleccionar</option>
                <option value="1">Soltero</option>
                <option value="2">Casado</option>
                <option value="3">Divorciado</option>
                <option value="4">Viudo</option>
            </select>
        </div>


        <div class="input-group">
            <label for="inputLugarTrabajo">Lugar de Trabajo</label>
            <select id="inputLugarTrabajo" class="form-select" @bind="officeId">
                <option value="" selected disabled>Seleccionar</option>
                <!-- Oficinas nuevas -->
                <option value="33">Digesett Mao</option>
                <option value="34">Digesett Santiago Rodriguez</option>
                <option value="35">Digesett Dajabon</option>
                <option value="36">Digesett Monte Cristi</option>
                <option value="37">Digesett Loma de Cabrera</option>
                <option value="38">Digesett Barahona</option>
                <option value="39">Digesett Neyba</option>
                <option value="40">Digesett Pedernales</option>
                <option value="41">Digesett Puerto Plata</option>
                <option value="42">Digesett Cabarete</option>
                <option value="43">Digesett Sosua</option>
                <option value="44">Digesett Santiago de los Caballeros</option>
                <option value="45">Digesett Constanza</option>
                <option value="46">Digesett San Jose de las Matas</option>
                <option value="47">Digesett Navarrete</option>
                <option value="48">Digesett Jarabacoa</option>
                <option value="49">Digesett La Vega</option>
                <option value="50">Digesett Moca</option>
                <option value="51">Digesett Nagua</option>
                <option value="52">Digesett San Francisco de Macoris</option>
                <option value="53">Digesett Samana</option>
                <option value="54">Digesett Salcedo</option>
                <option value="55">Digesett Bonao</option>
                <option value="56">Digesett Cotui</option>
                <option value="57">Digesett Villa Altagracia</option>
                <option value="58">Digesett Maimon</option>
                <option value="59">Digesett Bani</option>
                <option value="60">Digesett San Cristobal</option>
                <option value="61">Digesett San José de Ocoa</option>
                <option value="62">Digesett Santo Domingo Norte</option>
                <option value="63">Digesett Santo Domingo Oeste</option>
                <option value="64">Digesett Distrito Nacional</option>
                <option value="65">Digesett Zona Oriental</option>
                <option value="66">Digesett Digesett San Pedro de Macoris</option>
                <option value="67">Digesett Juan Dolio</option>
                <option value="68">Digesett Hato Mayor</option>
                <option value="69">Digesett Monte Plata</option>
                <option value="70">Digesett Yamasa</option>
                <option value="71">Digesett Bayaguana</option>
                <option value="72">Digesett Higuey</option>
                <option value="73">Digesett El Seibo</option>
                <option value="74">Digesett La Romana</option>
                <option value="75">Digesett San Juan de la Maguana</option>
                <option value="76">Digesett Azua</option>
            </select>
        </div>
    </div>

    <div class="buttons">
        <button class="cancel-button" @onclick="Cancelar">Cancelar</button>
        <button class="create-button" @onclick="ConfirmarActualizacion">Guardar</button>
    </div>
</div>



@code {
    [Parameter]
    public string Cedula { get; set; }
    private string profileImgPreview { get; set; } = string.Empty; // Guardará el dataUrl para la vista previa
    private string name { get; set; } = string.Empty;
    private string lastname { get; set; } = string.Empty;
    private string phone { get; set; } = string.Empty;
    private string noAgente { get; set; } = string.Empty;
    private string email { get; set; } = string.Empty;
    private decimal? height { get; set; }
    private DateTime? birthdate { get; set; }
    private int? genderId { get; set; }
    private int? bloodTypeId { get; set; }
    private int? civilStatusId { get; set; }
    private int? officeId { get; set; }
    private string profileImg { get; set; } = string.Empty; // Guardará el nombre del archivo
    bool alertaVisible = false;
    bool errorVisible = false;
    private string Role { get; set; }
    private string nameError { get; set; }
    private string lastnameError { get; set; }
    private string cedulaError { get; set; }
    private string phoneError { get; set; }
    private string noAgenteError { get; set; }
    private string genderError { get; set; }
    private string birthdateError { get; set; }
    private string emailError { get; set; }
    // Declaración de las variables necesarias
    private string gender = string.Empty;
    private string bloodType = string.Empty;
    private string civilStatus = string.Empty;
    private string office = string.Empty;


    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(Cedula))
        {
            await CargarUsuarioParaEdicion(Cedula);
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("alert", "Cédula no proporcionada.");
        }
        Console.WriteLine($"Cédula enviada para actualización: {Cedula}");

    }


    private async Task CargarUsuarioParaEdicion(string cedula)
    {
        try
        {
            string urlCompleta = $"https://digesett.somee.com/api/User/{cedula}";
            var usuario = await Http.GetFromJsonAsync<User>(urlCompleta);

            if (usuario != null)
            {
                // Asignar los valores del usuario a las variables del formulario
                name = usuario.Name;
                lastname = usuario.LastName;
                Cedula = usuario.Cedula;
                phone = usuario.Phone ?? string.Empty;
                email = usuario.email ?? string.Empty;
                noAgente = usuario.NoAgente ?? string.Empty;
                height = usuario.height.HasValue ? (decimal?)usuario.height.Value : null;

                // Convertir birthdate de string a DateTime?
                if (DateTime.TryParse(usuario.birthdate, out DateTime parsedDate))
                {
                    birthdate = parsedDate;
                }
                else
                {
                    birthdate = null; // O puedes asignar una fecha predeterminada si lo prefieres
                }

                // Asignar los valores de las relaciones directamente sin conversión
                gender = usuario.Gender ?? string.Empty;
                bloodType = usuario.bloodType ?? string.Empty;
                civilStatus = usuario.CivilStatus ?? string.Empty;
                office = usuario.office ?? string.Empty;
                var officeNormalized = (usuario.office ?? string.Empty).Trim().ToLowerInvariant();

                Console.WriteLine($"Office recibido del API: '{usuario.office}'");


                // Imagen de perfil si existe
                profileImgPreview = usuario.profileImg ?? string.Empty;

                // Asignación de ID según las relaciones
                genderId = usuario.Gender switch
                {
                    "Masculino" => 1,
                    "Femenino" => 2,
                    
                    _ => null
                };

                bloodTypeId = usuario.bloodType switch
                {
                    "A+" => 1,
                    "A-" => 2,
                    "B+" => 3,
                    "B-" => 4,
                    "O+" => 5,
                    "O-" => 6,
                    "AB+" => 7,
                    "AB-" => 8,
                    _ => null
                };

                civilStatusId = usuario.CivilStatus switch
                {
                    "soltero" => 1,
                    "casado" => 2,
                    "divorciado" => 3,
                    "viudo" => 4,
                    _ => null // En caso de que no sea un valor conocido, se deja como null
                };

                officeId = officeNormalized switch
                {
                    "digessett mao" => 33,
                    "digessett santiago rodriguez" => 34,
                    "digessett dajabon" => 35,
                    "digessett monte cristi" => 36,
                    "digessett loma de cabrera" => 37,
                    "digessett barahona" => 38,
                    "digessett neyba" => 39,
                    "digessett pedernales" => 40,
                    "digessett puerto plata" => 41,
                    "digessett cabarete" => 42,
                    "digessett sosua" => 43,
                    "digessett santiago de los caballeros" => 44,
                    "digessett constanza" => 45,
                    "digessett san jose de las matas" => 46,
                    "digessett navarrete" => 47,
                    "digessett jarabacoa" => 48,
                    "digessett la vega" => 49,
                    "digessett moca" => 50,
                    "digessett nagua" => 51,
                    "digessett san francisco de macoris" => 52,
                    "digessett samana" => 53,
                    "digessett salcedo" => 54,
                    "digessett bonao" => 55,
                    "digessett cotui" => 56,
                    "digessett villa altagracia" => 57,
                    "digessett maimon" => 58,
                    "digessett bani" => 59,
                    "digessett san cristobal" => 60,
                    "digessett san josé de ocoa" => 61,
                    "digessett santo domingo norte" => 62,
                    "digessett santo domingo oeste" => 63,
                    "digessett distrito nacional" => 64,
                    "digessett oriental" => 65,
                    "digessett san pedro de macoris" => 66,
                    "digessett juan dolio" => 67,
                    "digessett hato mayor" => 68,
                    "digessett monte plata" => 69,
                    "digessett yamasa" => 70,
                    "digessett bayaguana" => 71,
                    "digessett higuey" => 72,
                    "digessett el seibo" => 73,
                    "digessett la romana" => 74,
                    "digessett san juan de la maguana" => 75,
                    "digessett azua" => 76,
                    _ => null
                };


                // Actualizar la vista
                StateHasChanged();
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Usuario no encontrado.");
            }
        }
        catch (HttpRequestException httpEx)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error de solicitud HTTP: {httpEx.Message}");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error al cargar datos del usuario: {ex.Message}");
        }
    }


    private async Task ConfirmarActualizacion()
    {
        // Usar await directamente y obtener el resultado nullable
        bool? confirmar = await DialogService.Confirm(
            "¿Estás seguro de que deseas actualizar este usuario?",
            "Confirmar Actualización",
            new ConfirmOptions() { OkButtonText = "Sí", CancelButtonText = "No" }
        );

        // Convertir el nullable a bool (si es null se considera false)
        if (confirmar ?? false)
        {
            await ActualizarUsuario();
        }
    }


    private async Task ActualizarUsuario()
    {
        bool isValid = true;
        string emailPattern = @"^[^@\s]+@[^@\s]+\.[^@\s]+$";

        // Validar los campos con mensajes más detallados
        if (string.IsNullOrWhiteSpace(name))
        {
            nameError = "El nombre es obligatorio.";
            isValid = false;
        }
        else
        {
            nameError = null;
        }

        if (string.IsNullOrWhiteSpace(lastname))
        {
            lastnameError = "El apellido es obligatorio.";
            isValid = false;
        }
        else
        {
            lastnameError = null;
        }

        if (string.IsNullOrWhiteSpace(Cedula))
        {
            cedulaError = "La cédula es obligatoria.";
            isValid = false;
        }
        else if (Cedula.Contains('-'))
        {
            cedulaError = "Cédula incorrecta. Debe estar sin '-'.";
            isValid = false;
        }
        else if (Cedula.Length != 11 || !Cedula.All(char.IsDigit))
        {
            cedulaError = "Cédula inválida. Debe tener 11 números.";
            isValid = false;
        }
        else
        {
            cedulaError = null;
        }

        if (string.IsNullOrWhiteSpace(phone))
        {
            phoneError = "El teléfono es obligatorio.";
            isValid = false;
        }
        else if (phone.Contains('-'))
        {
            phoneError = "Número de teléfono incorrecto. Debe estar sin '-'.";
            isValid = false;
        }
        else if (phone.Length != 10 || !phone.All(char.IsDigit))
        {
            phoneError = "Número de teléfono inválido. Debe tener 10 números.";
            isValid = false;
        }
        else
        {
            phoneError = null;
        }


        if (birthdate.HasValue && (DateTime.Now.Year - birthdate.Value.Year) < 18)
        {
            birthdateError = "El usuario debe ser mayor de 18 años.";
            isValid = false;
        }
        else
        {
            birthdateError = null;
        }

        if (string.IsNullOrWhiteSpace(email))
        {
            emailError = "El correo electrónico es obligatorio.";
            isValid = false;
        }
        else if (!Regex.IsMatch(email, emailPattern))
        {
            emailError = "El correo electrónico no tiene un formato válido.";
            isValid = false;
        }
        else
        {
            emailError = null;
        }

        if (!genderId.HasValue)
        {
            genderError = "El sexo es obligatorio.";
            isValid = false;
        }
        else
        {
            genderError = null;
        }

        if (!isValid) return;

        // Crear el objeto DTO para la actualización
        var usuarioDto = new UserUpdateDto
            {
                Cedula = Cedula,
                Name = name.Trim(),
                LastName = lastname.Trim(),
                Email = string.IsNullOrWhiteSpace(email) ? null : email.Trim(),
                Phone = string.IsNullOrWhiteSpace(phone) ? null : phone.Trim(),
                ProfileImg = string.IsNullOrWhiteSpace(profileImg) ? null : profileImg.Trim(),
                GenderId = genderId.HasValue ? genderId.Value : (int?)null, // Asegúrate de usar GenderId
                BloodTypeId = bloodTypeId.HasValue ? bloodTypeId.Value : (int?)null, // Asegúrate de usar BloodTypeId
                CivilStatusId = civilStatusId.HasValue ? civilStatusId.Value : (int?)null, // Asegúrate de usar CivilStatusId
                OfficeId = officeId.HasValue ? officeId.Value : (int?)null, // Asegúrate de usar WorkLocationId
                Height = height,
                Birthdate = birthdate.HasValue ? birthdate.Value.ToString("yyyy-MM-dd") : null,
                NoAgente = string.IsNullOrWhiteSpace(noAgente) ? null : noAgente.Trim()
            };

        Console.WriteLine($"Usuario a enviar: {JsonConvert.SerializeObject(usuarioDto)}");

        try
        {
            var response = await Http.PutAsJsonAsync($"https://digesett.somee.com/api/User/UpdateAgent-Admin/{Cedula}", usuarioDto);

            if (response.IsSuccessStatusCode)
            {
                await MostrarAlerta(true);
                Console.WriteLine("Actualización exitosa");

                // Obtener los datos del usuario para determinar el rol
                var userResponse = await Http.GetAsync($"https://digesett.somee.com/api/User/{Cedula}");
                if (userResponse.IsSuccessStatusCode)
                {
                    var userData = await userResponse.Content.ReadFromJsonAsync<User>();
                    var userRole = userData?.Role;

                    if (userRole == "Administrador")
                    {
                        Console.WriteLine("Redirigiendo al perfil del administrador");
                        NavigationManager.NavigateTo($"/perfilAdministrador/{Cedula}");
                    }
                    else if (userRole == "Agente")
                    {
                        Console.WriteLine("Redirigiendo al perfil del agente");
                        NavigationManager.NavigateTo($"/perfilAgente/{Cedula}");
                    }
                }
                else
                {
                    Console.WriteLine("Error al obtener los datos del usuario");
                    await MostrarAlerta(false);
                }
            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Error en la actualización: {errorMessage}");
                await JSRuntime.InvokeVoidAsync("alert", $"Error al actualizar usuario. Código: {response.StatusCode}, Mensaje: {errorMessage}");
                await MostrarAlerta(false);
            }
        }
        catch (HttpRequestException httpEx)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error de solicitud HTTP: {httpEx.Message}");
            await MostrarAlerta(false);
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error al actualizar el usuario: {ex.Message}");
            await MostrarAlerta(false);
        }
    }
    private async Task Cancelar()
    {
        await JSRuntime.InvokeVoidAsync("window.history.back");
    }
    // Función para manejar la selección de la imagen
    private async Task ImagenPerfilSeleccionada(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file is not null)
        {
            // Solo almacenamos el nombre del archivo
            profileImg = file.Name;

            // Generar el dataUrl para la vista previa
            using var memoryStream = new MemoryStream();
            await file.OpenReadStream().CopyToAsync(memoryStream);
            var base64 = Convert.ToBase64String(memoryStream.ToArray());
            profileImgPreview = $"data:{file.ContentType};base64,{base64}";

            // Llamar a la función JavaScript para actualizar la vista previa de la imagen
            await JSRuntime.InvokeVoidAsync("setImagePreview", "#previewImagenPerfil", profileImgPreview);
        }
    }

    async Task MostrarAlerta(bool exito)
    {
        if (exito)
        {
            alertaVisible = true;
            errorVisible = false;
        }
        else
        {
            alertaVisible = false;
            errorVisible = true;
        }

        StateHasChanged(); // Actualiza la UI inmediatamente para que la alerta sea visible

        await Task.Delay(2000); // Muestra la alerta durante 3 segundos

        alertaVisible = false;
        errorVisible = false;

        StateHasChanged(); // Vuelve a actualizar la UI
    }


    public class UserUpdateDto
    {
        public string Cedula { get; set; }
        public string Name { get; set; }
        public string LastName { get; set; }
        public string? Email { get; set; }
        public string? Phone { get; set; }
        public string? ProfileImg { get; set; }
        public int? GenderId { get; set; } // Cambiado a int
        public int? BloodTypeId { get; set; } // Cambiado a int
        public int? OfficeId { get; set; } // Cambiado a int
        public int? CivilStatusId { get; set; } // Cambiado a int
        public decimal? Height { get; set; }
        public string? Birthdate { get; set; }
        public string? NoAgente { get; set; }
    }
}






