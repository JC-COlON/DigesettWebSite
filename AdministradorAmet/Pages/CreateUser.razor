
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject Radzen.DialogService DialogService
@using System.Text.RegularExpressions;
@using Newtonsoft.Json
@using System.Text.Json
@using SystemTextJson = System.Text.Json



<PageTitle>Administrador Digesett - Crear Usuario</PageTitle>
@page "/CreateUser"

<link href="https://fonts.googleapis.com/css2?family=Roboto:wght@500&display=swap" rel="stylesheet">
<link href="https://fonts.googleapis.com/css2?family=Poppins:wght@500&display=swap" rel="stylesheet">

<div class="header">
    <h1 class="title">Crear Usuarios</h1>
</div>





<div class="container">
    <hr class="divider" />
    <!-- Sección de imagen -->
    <div class="image-section">
        <!-- Vista previa de la imagen -->
        <div class="profile-image-container">
            <img src="imagenes/usuario.png" alt="Imagen de perfil" class="profile-image" id="previewImagenPerfil" />
        </div>

        <!-- Entrada para subir imagen -->
        @* <div class="image-input">
            <InputFile OnChange="ImagenPerfilSeleccionada" disabled="@IsDisabled("profileImg")" />
        </div> *@
    </div>



    <!-- Información Personal -->
    <h2 class="section-title">Información Personal</h2>
    <hr class="divider" />


    @if (alertaVisible)
    {
        <RadzenAlert Title="Éxito" AlertStyle="AlertStyle.Success" Visible="true" Variant="Radzen.Variant.Flat" Shade="Shade.Lighter" Icon="info">
            Usuario Creado correctamente.
        </RadzenAlert>
    }

    @if (errorVisible)
    {
        <RadzenAlert Title="Error" AlertStyle="AlertStyle.Danger" Visible="true" Variant="Radzen.Variant.Flat" Shade="Shade.Lighter" Icon="error">
            No se pudo Crear el usuario.
        </RadzenAlert>
    }

    @if (isLoadingCedula)
    {
        <div class="spinner">
            <!-- Aquí el contenido visual de tu spinner -->
            <span>Validando Cedula...</span>
        </div>
    }



   <div class="inputs-grid">
        <!-- Tipo de Usuario -->
        <div class="input-group">
            <label for="tipoUsuario">Tipo de Usuario</label>
            <select id="rolId" class="form-select" @onchange="TipoUsuarioChanged">
                <option value="" selected disabled>Seleccionar</option>
                <option value="1">Administrador</option>
                <option value="2">Agente</option>
                <option value="3">Ciudadano</option>
            </select>
        </div>



        <!-- Campos de entrada -->


        <div class="input-group">
            <label for="inputCedula">Cédula</label>
            <input id="inputCedula"
                   type="text"
                   class="form-input"
                   maxlength="11"
                   @bind="Cedula"
                   @onblur="ValidarCedulaEnAPI"
                   disabled="@IsDisabled("Cedula")" />
            @if (!string.IsNullOrEmpty(cedulaError))
            {
                <span class="error-message">@cedulaError</span>
            }
        </div>



        <div class="input-group">
            <label for="inputNombre">Nombre</label>
            <input id="inputNombre" type="text" class="form-input" @bind="name" disabled="@IsDisabled("name")" />
            @if (!string.IsNullOrEmpty(nameError))
            {
                <span class="error-message">@nameError</span>
            }
        </div>

        <div class="input-group">
            <label for="inputApellido">Apellido</label>
            <input id="inputApellido" type="text" class="form-input" @bind="lastname" disabled="@IsDisabled("lastname")" />
            @if (!string.IsNullOrEmpty(lastnameError))
            {
                <span class="error-message">@lastnameError</span>
            }
        </div>


        <div class="input-group">
            <label for="inputTelefono">Teléfono</label>
            <input id="inputTelefono" type="text" class="form-input" maxlength="10"
                   @bind="phone" autocomplete="off" disabled="@IsDisabled("phone")" />
            @if (!string.IsNullOrEmpty(phoneError))
            {
                <span class="error-message">@phoneError</span>
            }
        </div>

        <div class="input-group">
            <label for="inputPassword">Contraseña</label>
            <div class="password-container">
                <input id="inputPassword" type="@PasswordFieldType" class="form-input"
                       @bind="password" autocomplete="new-password" disabled="@IsDisabled("password")" />
                <button type="button" class="password-toggle @PasswordToggleClass"
                        @onclick="TogglePasswordField" disabled="@IsDisabled("Password")">
                    👁
                </button>
            </div>
            @if (!string.IsNullOrEmpty(passwordError))
            {
                <span class="error-message">@passwordError</span>
            }
        </div>


        <div class="input-group">
            <label for="inputSexo">Genero</label>
            <select id="inputSexo" class="form-select" @bind="genderId" disabled="@IsDisabled("genderId")">
                <option value="" selected disabled>Seleccionar</option>
                <option value="1">Masculino</option>
                <option value="2">Femenino</option>
                <option value="3">Otros</option>
            </select>
            @if (!string.IsNullOrEmpty(genderError))
            {
                <span class="error-message">@genderError</span>
            }
        </div>

        <div class="input-group">
            <label for="inputEmail">Email</label>
            <input id="inputEmail" type="email" class="form-input" @bind="email" disabled="@IsDisabled("email")" />
            @if (!string.IsNullOrEmpty(emailError))
            {
                <span class="error-message">@emailError</span>
            }

        </div>

        <div class="input-group">
            <label for="inputNoAgente">No. Agente</label>
            <input id="inputNoAgente" type="text" class="form-input" @bind="noAgente" disabled="@IsDisabled("noAgente")" />
        </div>



        <div class="input-group">
            <label for="inputEstatura">Estatura (metros)</label>
            <input id="inputEstatura" type="number" step="0.01" class="form-input" @bind="height" disabled="@IsDisabled("height")" />
        </div>

        <div class="input-group">
            <label for="inputFechaNacimiento">Fecha de Nacimiento</label>
            <input id="inputFechaNacimiento" type="date" class="form-input" @bind="birthdate" disabled="@IsDisabled("birthdate")" />
            @if (!string.IsNullOrEmpty(birthdateError))
            {
                <span class="error-message">@birthdateError</span>
            }
        </div>

        <div class="input-group">
            <label for="inputTipoSangre">Tipo de Sangre</label>
            <select id="inputTipoSangre" class="form-select" @bind="bloodTypeId" disabled="@IsDisabled("bloodTypeId")">
                <option value="" selected disabled>Seleccionar</option>
                <option value="1">A+</option>
                <option value="2">A-</option>
                <option value="3">B+</option>
                <option value="4">B-</option>
                <option value="5">O+</option>
                <option value="6">O-</option>
                <option value="7">AB+</option>
                <option value="8">AB-</option>
            </select>
        </div>
        <div class="input-group">
            <label for="inputEstadoCivil">Estado Civil</label>
            <select id="inputEstadoCivil" class="form-select" @bind="civilStatusId" disabled="@IsDisabled("civilStatusId")">
                <option value="" selected disabled>Seleccionar</option>
                <option value="1">Soltero</option>
                <option value="2">Casado</option>
                <option value="3">Divorciado</option>
                <option value="4">Viudo</option>
            </select>
        </div>


        <div class="input-group">
            <label> Comandancia</label>
            <select class="form-select" @onchange="FiltrarOficinas" disabled="@(!ComandanciaHabilitada)">
                <option disabled selected value="">Seleccionar </option>
                @foreach (var cmd in comandancias)
                {
                    <option value="@cmd.Id">@cmd.Name</option>
                }
            </select>
        </div>



        @if (filteredOffices.Any())
        {
            <div class="input-group mt-3">
                <label> Digesett</label>
                <select class="form-select" @bind="officeId" disabled="@IsDisabled("officeId")">
                    <option disabled selected value="">Seleccionar</option>
                    @foreach (var office in filteredOffices)
                    {
                        <option value="@office.Id">@office.Name</option>
                    }
                </select>
            </div>
        }

    



    
    </div>

    <div class="buttons">
        <button class="cancel-button" @onclick="Cancelar">Cancelar</button>
        <button class="create-button" @onclick="CrearUsuario">Crear</button>
    </div>
</div>

@code {
    private const string ApiUrl = "https://digesett.somee.com/api/UserAccess/Create"; // URL de la API
    private int? rolId { get; set; } // Guardará el tipo de usuario seleccionado (1, 2, 3)
    private string profileImgPreview { get; set; } = string.Empty; // Guardará el dataUrl para la vista previa
    private string name { get; set; } = string.Empty;
    private string lastname { get; set; } = string.Empty;
    private string Cedula { get; set; } = string.Empty;
    private string phone { get; set; } = string.Empty;
    private string noAgente { get; set; } = string.Empty;
    private string password { get; set; } = string.Empty;
    private string email { get; set; } = string.Empty;
    private decimal? height { get; set; }
    private DateTime? birthdate { get; set; }
    private int? genderId { get; set; }
    private int? bloodTypeId { get; set; }
    private int? civilStatusId { get; set; }
    private int? officeId { get; set; }
    private string profileImg { get; set; } = string.Empty; // Guardará el nombre del archivo
    bool alertaVisible = false;
    bool errorVisible = false;
    private bool cedulaEsValida = true;
    private string PasswordFieldType { get; set; } = "password";
    private string PasswordToggleClass { get; set; } = "toggle-hidden";
    private Dictionary<string, bool> DisabledFields = new()
    {
        { "name", true },
        { "lastname", true },
        { "Cedula", true },
        { "phone", true },
        { "noAgente", true },
        { "password", true },
        { "email", true },
        { "height", true },
        { "birthdate", true },
        { "genderId", true },
        { "bloodTypeId", true },
        { "civilStatusId", true },
        { "officeId", true },
        { "profileImg", true }
    };
    private bool ComandanciaHabilitada => rolId == 1 || rolId == 2;

    private bool IsDisabled(string fieldName)
    {
        // Si el campo es la cédula, usa solo la lógica original
        if (fieldName == "Cedula")
            return DisabledFields.ContainsKey(fieldName) && DisabledFields[fieldName];

        // Para los demás campos, también valida que la cédula sea válida
        return (!cedulaEsValida) || (DisabledFields.ContainsKey(fieldName) && DisabledFields[fieldName]);
    }


    private string nameError { get; set; }
    private string lastnameError { get; set; }
    private string cedulaError { get; set; }
    private string phoneError { get; set; }
    private string passwordError { get; set; }
    private string birthdateError { get; set; }
    private string emailError { get; set; }
    private string genderError { get; set; }
    private string? officeError;


    // Función que cambia la visibilidad de la contraseña
    private void TogglePasswordField()
    {
        if (PasswordFieldType == "password")
        {
            PasswordFieldType = "text";   // La contraseña se hace visible
            PasswordToggleClass = "toggle-visible"; // Cambia la clase a verde
        }
        else
        {
            PasswordFieldType = "password"; // La contraseña se oculta
            PasswordToggleClass = "toggle-hidden"; // Vuelve a la clase negra
        }
    }

    private string GetToggleClass() => PasswordFieldType == "password" ? "toggle-off" : "toggle-on";

    private void TipoUsuarioChanged(ChangeEventArgs e)
    {
        // Convierte el valor a un número entero, si es posible
        rolId = int.TryParse(e.Value?.ToString(), out var value) ? value : (int?)null;

        // Deshabilitar todos los campos por defecto
        foreach (var field in DisabledFields.Keys.ToList())
            DisabledFields[field] = true;

        // Habilitar campos dependiendo del tipo de usuario seleccionado
        if (rolId == 3) // Ciudadano
        {
            DisabledFields["name"] = false;
            DisabledFields["lastname"] = false;
            DisabledFields["Cedula"] = false;
            DisabledFields["phone"] = false;
            DisabledFields["password"] = false;
            DisabledFields["email"] = false;
            DisabledFields["genderId"] = false;
        }
        else if (rolId == 1 || rolId == 2) // Administrador o Agente
        {
            foreach (var field in DisabledFields.Keys.ToList())
                DisabledFields[field] = false; // Habilitar todos los campos

            DisabledFields["profileImg"] = false; // Habilitar imagen solo para Agente/Administrador
        }
    }

    private async Task CrearUsuario()
    {
        // Validaciones
        bool isValid = true;
        string emailPattern = @"^[^@\s]+@[^@\s]+\.[^@\s]+$";

        if (string.IsNullOrWhiteSpace(name))
        {
            nameError = "El nombre es obligatorio.";
            isValid = false;
        }
        else
        {
            nameError = null;
        }

        if (string.IsNullOrWhiteSpace(lastname))
        {
            lastnameError = "El apellido es obligatorio.";
            isValid = false;
        }
        else
        {
            lastnameError = null;
        }

        if (string.IsNullOrWhiteSpace(Cedula))
        {
            cedulaError = "La cédula es obligatoria.";
            isValid = false;
        }
        else if (Cedula.Contains('-'))
        {
            cedulaError = "Cédula incorrecta. Debe estar sin '-'.";
            isValid = false;
        }
        else if (Cedula.Length != 11 || !Cedula.All(char.IsDigit))
        {
            cedulaError = "Cédula inválida. Debe tener 11 números.";
            isValid = false;
        }
        else
        {
            cedulaError = null;
        }

        if (string.IsNullOrWhiteSpace(phone))
        {
            phoneError = "El teléfono es obligatorio.";
            isValid = false;
        }
        else if (phone.Contains('-'))
        {
            phoneError = "Número de teléfono incorrecto. Debe estar sin '-'.";
            isValid = false;
        }
        else if (phone.Length != 10 || !phone.All(char.IsDigit))
        {
            phoneError = "Número de teléfono inválido. Debe tener 10 números.";
            isValid = false;
        }
        else
        {
            phoneError = null;
        }

        if (password.Length <= 6)
        {
            passwordError = "La contraseña debe tener más de 6 caracteres.";
            isValid = false;
        }
        else
        {
            passwordError = null;
        }

        if (birthdate.HasValue && (DateTime.Now.Year - birthdate.Value.Year) < 18)
        {
            birthdateError = "El usuario debe ser mayor de 18 años.";
            isValid = false;
        }
        else
        {
            birthdateError = null;
        }

        if (string.IsNullOrWhiteSpace(email))
        {
            emailError = "El correo electrónico es obligatorio.";
            isValid = false;
        }
        else if (!Regex.IsMatch(email, emailPattern))
        {
            emailError = "El correo electrónico no tiene un formato válido.";
            isValid = false;
        }
        else
        {
            emailError = null;
        }

        if (!genderId.HasValue)
        {
            genderError = "El genero es obligatorio.";
            isValid = false;
        }
        else
        {
            genderError = null;
        }
        if (!officeId.HasValue)
        {
            officeError = "La oficina de digesett es obligatoria.";
            isValid = false;
        }
        else
        {
            officeError = null;
        }


        if (!isValid)
        {
            return;
        }

        var usuario = new
        {
            cedula = Cedula,
            name = name,
            lastname = lastname,
            password = string.IsNullOrWhiteSpace(password) ? null : password,
            rolId = rolId,
            email = string.IsNullOrWhiteSpace(email) ? null : email,
            phone = string.IsNullOrWhiteSpace(phone) ? null : phone,
            profileImg = string.IsNullOrWhiteSpace(profileImg) ? null : profileImg,
            nacionalityId = (int?)null,
            birthdate = birthdate.HasValue ? birthdate.Value.ToString("yyyy-MM-dd") : null,
            genderId = genderId,
            bloodTypeId = bloodTypeId,
            height = height.HasValue ? height.Value : (decimal?)null,
            officeId = officeId,
            civilStatusId = civilStatusId,
            noAgente = string.IsNullOrWhiteSpace(noAgente) ? null : noAgente,
            statusId = 1
        };

        // Serializar a JSON
        var jsonString = System.Text.Json.JsonSerializer.Serialize(usuario);

        // // Mostrar alert con JSON antes de enviar
        // await JSRuntime.InvokeVoidAsync("alert", $"Datos que se enviarán:\n{jsonString}");

        try
        {
            var response = await Http.PostAsJsonAsync(ApiUrl, usuario);
            Console.WriteLine(response);

            if (response.IsSuccessStatusCode)
            {
                await MostrarAlerta(true);
                NavigationManager.NavigateTo("/Usuarios");
            }
            else
            {
                await MostrarAlerta(false);
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error al crear usuario: {ex.Message}");
            Console.WriteLine($"Error al crear usuario: {ex}");
        }
    }

    private void Cancelar()
    {
        NavigationManager.NavigateTo("/usuarios");
    }

    // Función para manejar la selección de la imagen
    private async Task ImagenPerfilSeleccionada(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file is not null)
        {
            // Solo almacenamos el nombre del archivo
            profileImg = file.Name;

            // Generar el dataUrl para la vista previa
            using var memoryStream = new MemoryStream();
            await file.OpenReadStream().CopyToAsync(memoryStream);
            var base64 = Convert.ToBase64String(memoryStream.ToArray());
            profileImgPreview = $"data:{file.ContentType};base64,{base64}";

            // Llamar a la función JavaScript para actualizar la vista previa de la imagen
            await JSRuntime.InvokeVoidAsync("setImagePreview", "#previewImagenPerfil", profileImgPreview);
        }
    }
    async Task MostrarAlerta(bool exito)
    {
        if (exito)
        {
            alertaVisible = true;
            errorVisible = false;
        }
        else
        {
            alertaVisible = false;
            errorVisible = true;
        }

        StateHasChanged(); // Actualiza la UI inmediatamente para que la alerta sea visible

        await Task.Delay(2000); // Muestra la alerta durante 3 segundos

        alertaVisible = false;
        errorVisible = false;

        StateHasChanged(); // Vuelve a actualizar la UI
    }

    private bool isLoadingCedula = false;  // Esta propiedad controla el spinner

    private async Task ValidarCedulaEnAPI(FocusEventArgs e)
    {
        cedulaEsValida = false; // Por defecto, deshabilita hasta comprobar
        isLoadingCedula = true; // Mostrar spinner
        StateHasChanged();

        if (Cedula.Length != 11 || !Cedula.All(char.IsDigit))
        {
            cedulaError = "Cédula inválida.";
            isLoadingCedula = false; // Ocultar spinner
            StateHasChanged();
            return;
        }

        try
        {
            var response = await Http.GetAsync($"https://api.digital.gob.do/v3/cedulas/{Cedula}/validate");

            var responseContent = await response.Content.ReadAsStringAsync();

            if (!string.IsNullOrWhiteSpace(responseContent))
            {
                var result = SystemTextJson.JsonSerializer.Deserialize<CedulaValidationResult>(responseContent, new SystemTextJson.JsonSerializerOptions { PropertyNameCaseInsensitive = true });

                if (result is not null && result.valid)
                {
                    cedulaError = null;
                    cedulaEsValida = true; // Formulario se puede volver a habilitar
                }
                else
                {
                    cedulaError = "La cédula no es válida según el registro oficial.";
                }
            }
            else
            {
                cedulaError = "No se pudo validar la cédula.";
            }
        }
        catch (Exception ex)
        {
            cedulaError = "Error de conexión al validar la cédula.";
            Console.WriteLine($"Error: {ex.Message}");
        }

        isLoadingCedula = false; // Ocultar spinner
        StateHasChanged();
    }



    public class CedulaValidationResult
    {
        public bool valid { get; set; }
    }


}

@code {
    private List<CommandRegion> comandancias = new();
    private int? selectedCommandId;
    private int? selectedOfficeId;
    private List<Office> filteredOffices = new();

    protected override void OnInitialized()
    {
        comandancias = new List<CommandRegion>
    {
        new() {
            Id = 1, Name = "Comandancia Regional Noroeste", Offices = new List<Office> {
                new() { Id = 33, Name = "Digesett Mao", CommandId = 1 },
                new() { Id = 34, Name = "Digesett Santiago Rodriguez", CommandId = 1 },
                new() { Id = 35, Name = "Digesett Dajabon", CommandId = 1 },
                new() { Id = 36, Name = "Digesett Monte Cristi", CommandId = 1 },
                new() { Id = 37, Name = "Digesett Loma De Cabrera", CommandId = 1 },
            }
        },
        new() {
            Id = 2, Name = "Comandancia Regional Sur Barahona", Offices = new List<Office> {
                new() { Id = 38, Name = "Digesett Barahona", CommandId = 2 },
                new() { Id = 39, Name = "Digesett Neyba", CommandId = 2 },
                new() { Id = 40, Name = "Digesett Pedernales", CommandId = 2 },
            }
        },
        new() {
            Id = 3, Name = "Comandancia Regional Puerto Plata", Offices = new List<Office> {
                new() { Id = 41, Name = "Digesett Puerto Plata", CommandId = 3 },
                new() { Id = 42, Name = "Digesett Cabarete", CommandId = 3 },
                new() { Id = 43, Name = "Digesett Sosua", CommandId = 3 },
            }
        },
        new() {
            Id = 4, Name = "Comandancia Regional Norte", Offices = new List<Office> {
                new() { Id = 44, Name = "Digesett Santiago De Los Caballeros", CommandId = 4 },
                new() { Id = 45, Name = "Digesett Constanza", CommandId = 4 },
                new() { Id = 46, Name = "Digesett San Jose De Las Matas", CommandId = 4 },
                new() { Id = 47, Name = "Digesett Navarrete", CommandId = 4 },
                new() { Id = 48, Name = "Digesett Jarabacoa", CommandId = 4 },
                new() { Id = 49, Name = "Digesett La Vega", CommandId = 4 },
                new() { Id = 50, Name = "Digesett Moca", CommandId = 4 },
            }
        },
        new() {
            Id = 5, Name = "Comandancia Regional Nordeste", Offices = new List<Office> {
                new() { Id = 51, Name = "Digesett Nagua", CommandId = 5 },
                new() { Id = 52, Name = "Digesett San Francisco De Macoris", CommandId = 5 },
                new() { Id = 53, Name = "Digesett Samana", CommandId = 5 },
                new() { Id = 54, Name = "Digesett Salcedo", CommandId = 5 },
            }
        },
        new() {
            Id = 6, Name = "Comandancia Cibao Sur", Offices = new List<Office> {
                new() { Id = 55, Name = "Digesett Bonao", CommandId = 6 },
                new() { Id = 56, Name = "Digesett Cotui", CommandId = 6 },
                new() { Id = 57, Name = "Digesett Villa Altagracia", CommandId = 6 },
                new() { Id = 58, Name = "Digesett Maimon", CommandId = 6 },
            }
        },
        new() {
            Id = 7, Name = "Comandancia Regional Sur Central", Offices = new List<Office> {
                new() { Id = 59, Name = "Digesett Bani", CommandId = 7 },
                new() { Id = 60, Name = "Digesett San Cristobal", CommandId = 7 },
                new() { Id = 61, Name = "Digesett San José De Ocoa", CommandId = 7 },
            }
        },
        new() {
            Id = 8, Name = "Comandancia Santo Domingo Norte", Offices = new List<Office> {
                new() { Id = 62, Name = "Digesett Santo Domingo Norte", CommandId = 77 },
            }
        },
        new() {
            Id = 9, Name = "Comandancia Santo Domingo Oeste", Offices = new List<Office> {
                new() { Id = 63, Name = "Digesett Santo Domingo Oeste", CommandId = 78 },
            }
        },
        new() {
            Id = 10, Name = "Comandancia Distrito Nacional", Offices = new List<Office> {
                new() { Id = 64, Name = "Digesett Distrito Nacional", CommandId = 79 },
            }
        },
        new() {
            Id = 11, Name = "Comandancia Oriental", Offices = new List<Office> {
                new() { Id = 65, Name = "Digesett Zona Oriental", CommandId = 80 },
            }
        },
        new() {
            Id = 12, Name = "Comandancia Regional Sureste", Offices = new List<Office> {
                new() { Id = 66, Name = "Digesett San Pedro De Macoris", CommandId = 12 },
                new() { Id = 67, Name = "Digesett Juan Dolio", CommandId = 12 },
                new() { Id = 68, Name = "Digesett Hato Mayor", CommandId = 12 },
                new() { Id = 69, Name = "Digesett Monte Plata", CommandId = 12 },
                new() { Id = 70, Name = "Digesett Yamasa", CommandId = 12 },
                new() { Id = 71, Name = "Digesett Bayaguana", CommandId = 12 },
            }
        },
        new() {
            Id = 13, Name = "Comandancia Regional Este", Offices = new List<Office> {
                new() { Id = 72, Name = "Digesett Higuey", CommandId = 13 },
                new() { Id = 73, Name = "Digesett El Seibo", CommandId = 13 },
                new() { Id = 74, Name = "Digesett La Romana", CommandId = 13 },
            }
        },
        new() {
            Id = 14, Name = "Comandancia Regional Suroeste", Offices = new List<Office> {
                new() { Id = 75, Name = "Digesett San Juan De La Maguana", CommandId = 14 },
                new() { Id = 76, Name = "Digesett Azua", CommandId = 14 },
            }
        },
    };
    }



    private void FiltrarOficinas(ChangeEventArgs e)
    {
        selectedCommandId = int.Parse(e.Value?.ToString() ?? "0");
        filteredOffices = comandancias.FirstOrDefault(c => c.Id == selectedCommandId)?.Offices ?? new();
        selectedOfficeId = null;

    }

    public class CommandRegion
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public List<Office> Offices { get; set; } = new();
    }

    public class Office
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public int CommandId { get; set; }
    }
}



