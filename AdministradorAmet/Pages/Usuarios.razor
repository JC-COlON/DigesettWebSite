@* @page "/usuarios"
@using MudBlazor
@using AdministradorAmet.Models
@inject HttpClient Http
@using Newtonsoft.Json
@inject NavigationManager NavigationManager


<link href="https://fonts.googleapis.com/css2?family=Roboto:wght@500&display=swap" rel="stylesheet">
<link href="https://fonts.googleapis.com/css2?family=Poppins:wght@500&display=swap" rel="stylesheet">

<h1 class="title">Usuarios</h1>
<div class="container">
    <div class="header">
        <MudButton Class="create-button"  OnClick="CrearUsuario">
            <MudIcon Icon="@Icons.Material.Filled.Add" />  Nuevo
        </MudButton>

        <div class="actions-container">
            <MudTextField Class="search-field" @bind-Value="_searchString" Placeholder="Buscar" 
                Adornment="Adornment.Start" Immediate="true" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium">
            </MudTextField>
            <MudButton Class="filter-button" OnClick="FiltrarPorAgentes">Agentes</MudButton>
            <MudButton Class="filter-button" OnClick="FiltrarPorCiudadanos">Ciudadanos</MudButton>
            <MudButton Class="filter-button" OnClick="FiltrarPorAdministradores">Administradores</MudButton>
        </div>
    </div>

    <div class="divider"></div>

    <div class="divider"></div>
    <div>
        <MudFilterContext>
            <MudDataGrid T="Users" Items="@usuarios" SortMode="SortMode.Multiple" Filterable="true" QuickFilter="@_quickFilter"
                Hideable="true" RowClick="@RowClicked" RowContextMenuClick="RowRightClicked" SelectedItemsChanged="@SelectedItemsChanged">
                <Columns>
                    <!-- Columna de Imagen -->
                    <TemplateColumn Title="Foto">
                        <Template>
                            <MudAvatar Image="imagenes/usuario.png" Alt="Usuario" Size="Size.Medium" Class="mud-border-circle" />
                        </Template>
                    </TemplateColumn>

                    <!-- Otras columnas -->
                    <PropertyColumn Property="x => x.FullName" Title="Nombre Completo" HeaderClass="bold-header" Filterable="true" />
                    <PropertyColumn Property="x => x.gender" Title="Sexo" HeaderClass="bold-header" Filterable="true" />
                    <PropertyColumn Property="x => x.cedula" Title="Cédula" HeaderClass="bold-header" Filterable="true" />
                    <PropertyColumn Property="x => x.phone" Title="Teléfono" HeaderClass="bold-header" Filterable="true" />
                    <PropertyColumn Property="x => x.role" Title="Tipo de Usuario" HeaderClass="bold-header" Filterable="true" />

                </Columns>
                <PagerContent>
                    <MudDataGridPager T="Users" />
                </PagerContent>
            </MudDataGrid>
        </MudFilterContext>
    </div>
</div>

@code {
  
    private List<Users> usuarios = new();
    private string _searchString = string.Empty;

    private Func<Users, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        return x.cedula?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true ||
               x.name?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true ||
               x.lastName?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true ||
               x.phone?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true ||
               x.role?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true ||
               x.gender?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true;
    };

    protected override async Task OnInitializedAsync()
    {
        await CargarUsuarios();
    }

    private async Task CargarUsuarios()
    {
        try
        {
            var response = await Http.GetStringAsync("https://localhost:7277/api/User/all");
            var deserializedResponse = JsonConvert.DeserializeObject<List<Users>>(response);

            if (deserializedResponse != null)
            {
                usuarios = deserializedResponse;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar usuarios: {ex.Message}");
        }
    }

    private void RowClicked(DataGridRowClickEventArgs<Users> args)
    {
        // Lógica para manejar el click en una fila
    }

    private void RowRightClicked(DataGridRowClickEventArgs<Users> args)
    {
        // Lógica para manejar el click derecho en una fila
    }

    private void SelectedItemsChanged(HashSet<Users> items)
    {
        // Lógica para manejar los elementos seleccionados
    }

    private void CrearUsuario()
    {
        NavigationManager.NavigateTo("CreateUser");
    }
    private void VerPerfil(Users usuario)
    {
        Console.WriteLine($"Ver perfil del usuario: {usuario.FullName}");
        // Navegar a la página del perfil del usuario
        NavigationManager.NavigateTo("perfilUsuario");
    }



    private void EliminarUsuario(Users usuario)
    {
        Console.WriteLine($"Eliminar usuario: {usuario.FullName}");
        // Lógica para eliminar el usuario
    }
    private void FiltrarPorAgentes()
    {
        // Lógica para filtrar por Agentes
    }

    private void FiltrarPorCiudadanos()
    {
        // Lógica para filtrar por Ciudadanos
    }

    private void FiltrarPorAdministradores()
    {
        // Lógica para filtrar por Administradores
    }


}
 *@