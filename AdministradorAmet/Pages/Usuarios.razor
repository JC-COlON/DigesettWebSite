@page "/Usuarios"
@using AdministradorAmet.Models
@using Newtonsoft.Json
@using Radzen.Blazor
@inject HttpClient Http
@inject NavigationManager NavigationManager

<link href="https://fonts.googleapis.com/css2?family=Poppins:wght@500&display=swap" rel="stylesheet">
<link href="https://fonts.googleapis.com/css2?family=Roboto:wght@500&display=swap" rel="stylesheet">

<div class="header-container">
    <h1 class="title">Usuarios</h1>
</div>

<div class="container">
    <div class="button-container">
        <RadzenButton Text="Nuevo"
                      Icon="add"
                      Class="create-button"
                      Click="NavigateToCrearUsuario"
                      ButtonStyle="ButtonStyle.Success"
                      Style="width: 140px; height: 40px; background-color: #009C40; color: white; border: 3px solid #009C40;" />

    </div>
    <hr class="divider" />
    <div class="search-and-buttons-container" style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 10px;">
        <!-- Botones (Izquierda) -->
        <div class="buttons-container" style="display: flex; align-items: center;">
            <RadzenButton Text="Agente"
                          Class="search-button"
                          Style="height: 30px; border-radius: 10px; border: 2px solid #009C40; background-color: white; color: #009C40; font-family: 'Poppins', sans-serif; font-weight: 500; padding: 5px 10px; font-size: 14px; margin-left: 10px;" />
            <RadzenButton Text="Administrador"
                          Class="search-button"
                          Style="height: 30px; border-radius: 10px; border: 2px solid #009C40; background-color: white; color: #009C40; font-family: 'Poppins', sans-serif; font-weight: 500; padding: 5px 10px; font-size: 14px; margin-left: 10px;" />
            <RadzenButton Text="Ciudadano"
                          Class="search-button"
                          Style="height: 30px; border-radius: 10px; border: 2px solid #009C40; background-color: white; color: #009C40; font-family: 'Poppins', sans-serif; font-weight: 500; padding: 5px 10px; font-size: 14px; margin-left: 10px;" />
        </div>

        <!-- Barra de búsqueda (Derecha) -->
        <div class="search-container">
            <label for="search" class="search-label" style="margin-right: 10px;">Buscar:</label>
            <RadzenTextBox Placeholder="Buscar usuario..."
                           ValueChanged="@(value => BuscarUsuario(value))"
                           Style="margin-bottom: 10px; height: 30px; width: 280px;"
                           Value="@searchText"
                           id="search" />
        </div>
    </div>




    @if (users == null)
    {
        <p>Cargando....</p>
    }
    else
    {
        <div>
            <head>
                <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@500&display=swap" rel="stylesheet">
                <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@500&display=swap" rel="stylesheet">
            </head>

            <RadzenDataGrid AllowPaging="true" AllowFiltering="true" PageSize="9"
                            AllowSorting="true" Data="@filteredUsers" TItem="User"
                            RowClick="@(args => RowClicked(args.Data))"
                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive">
                            
                <Columns>
       @*              <RadzenDataGridColumn TItem="User" Title="" Width="35px">
                        <Template Context="usuario">
                            @if (usuario.Gender == "Masculino")
                            {
                                <img src="imagenes/usuario.png" alt="Masculino" style="width: 30px; height: 30px; border-radius: 50%;" />
                            }
                            else if (usuario.Gender == "Femenino")
                            {
                                <img src="imagenes/femenina.png" alt="Femenino" style="width: 30px; height: 30px; border-radius: 50%;" />
                            }
                            else
                            {
                                <img src="imagenes/usuario.png" alt="Sin género" style="width: 30px; height: 30px; border-radius: 50%;" />
                            }
                        </Template>
                    </RadzenDataGridColumn> *@
@* 


                    <RadzenDataGridColumn TItem="User" Property="FullName" Width="85px">
                        <HeaderTemplate>
                            <span style="font-weight: bold; font-size: medium; font-family: 'Poppins', sans-serif;">Nombre completo</span>
                        </HeaderTemplate>
                        <Template Context="usuario">
                            <span style="font-family: 'Roboto', sans-serif; font-size: medium">@usuario.FullName</span>
                        </Template>
                    </RadzenDataGridColumn> *@

                    <RadzenDataGridColumn TItem="User" Title="Nombre Completo" Width="95px">
                        <HeaderTemplate>
                            <span style="font-weight: bold; font-size: medium; font-family: 'Poppins', sans-serif;">Nombre completo</span>
                        </HeaderTemplate>
                        <Template Context="usuario">
                            <span style="font-family: 'Roboto', sans-serif; font-size: medium">@usuario.FullName</span>
                        </Template>
                        <Template Context="usuario">
                            <div style="display: flex; align-items: center;">
                                <img src="@GetImagePath(usuario.Gender)" alt="Avatar" style="width: 30px; height: 30px; border-radius: 50%; margin-right: 20px;" />
                                <span style="font-family: 'Roboto', sans-serif; font-size: medium;">@usuario.FullName</span>
                            </div>
                        </Template>
                    </RadzenDataGridColumn>


                    <RadzenDataGridColumn TItem="User" Property="Cedula" Width="70px">
                        <HeaderTemplate>
                            <span style="font-weight: bold; font-size: medium; font-family: 'Poppins', sans-serif;">Cédula</span>
                        </HeaderTemplate>
                        <Template Context="usuario">
                            <span style="font-family: 'Roboto', sans-serif;font-size: medium">@usuario.Cedula</span>
                        </Template>
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn TItem="User" Property="Gender" Width="65px">
                        <HeaderTemplate>
                            <span style="font-weight: bold; font-size: medium; font-family: 'Poppins', sans-serif;">Sexo</span>
                        </HeaderTemplate>
                        <Template Context="usuario">
                            <span style="font-family: 'Roboto', sans-serif;font-size: medium">@usuario.Gender</span>
                        </Template>
                        <Template Context="usuario">
                            @if (string.IsNullOrWhiteSpace(usuario.Gender))
                            {
                                <span style="display: block; text-align:justify; width: 100%;font-size:large">-</span>  <!-- Muestra un guion si no hay valor -->
                            }
                            else
                            {
                                <span style="font-family: 'Roboto', sans-serif; font-size: medium;">@usuario.Gender</span>
                            }
                        </Template>
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn TItem="User" Property="Phone" Width="70px">
                        <HeaderTemplate>
                            <span style="font-weight: bold; font-size: medium; font-family: 'Poppins', sans-serif;">Teléfono</span>
                        </HeaderTemplate>
                        <Template Context="usuario">
                            <span style="font-family: 'Roboto', sans-serif; font-size: medium">@usuario.Phone</span>
                        </Template>
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn TItem="User" Property="Role" Width="70px">
                        <HeaderTemplate>
                            <span style="font-weight: bold; font-size: medium; font-family: 'Poppins', sans-serif;">Tipo de Usuario</span>
                        </HeaderTemplate>
                        <Template Context="usuario">
                            <span style="font-family: 'Roboto', sans-serif;font-size: medium">@usuario.Role</span>
                        </Template>
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn TItem="User" Width="50px" Title="Acción" >
                        <HeaderTemplate>
                            <span style="font-weight: bold; font-size: medium; font-family: 'Poppins', sans-serif;">Acción</span>
                        </HeaderTemplate>
                        <Template Context="usuario">
                            <RadzenSplitButton Icon="more_vert" />
                            <Radzen.Blazor.Rendering.Popup>
                                <RadzenMenu>
                                    <RadzenMenuItem Text="Ver" Icon="visibility" Click="@(args => VerUsuario(usuario))" />
                                    <RadzenMenuItem Text="Eliminar" Icon="delete" Click="@(args => EliminarUsuario(usuario))" />
                                </RadzenMenu>
                            </Radzen.Blazor.Rendering.Popup>
                        </Template>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>



        </div>
    }
</div>

@code {
    private IEnumerable<User> users;
    private IEnumerable<User> filteredUsers;
    private string searchText = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await CargarUsuarios();
        filteredUsers = users;
    }

    private async Task CargarUsuarios()
    {
        try
        {
            var response = await Http.GetStringAsync("https://localhost:7277/api/User/all");
            users = JsonConvert.DeserializeObject<List<User>>(response);
            filteredUsers = users;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar usuarios: {ex.Message}");
        }
    }

    private void BuscarUsuario(string value)
    {
        if (string.IsNullOrWhiteSpace(value))
        {
            filteredUsers = users;
            return;
        }

        filteredUsers = users.Where(user =>
        {
            return user != null &&
                   (user.FullName?.Contains(value, StringComparison.OrdinalIgnoreCase) == true ||
                    user.Gender?.Contains(value, StringComparison.OrdinalIgnoreCase) == true ||
                    user.Cedula?.Contains(value, StringComparison.OrdinalIgnoreCase) == true ||
                    user.Phone?.Contains(value, StringComparison.OrdinalIgnoreCase) == true ||
                    user.Role?.Contains(value, StringComparison.OrdinalIgnoreCase) == true);
        }).ToList();
    }

    private void RowClicked(User user)
    {
        Console.WriteLine($"Ver perfil del usuario: {user.FullName}");
        NavigationManager.NavigateTo("perfilUsuario");
    }

    private void NavigateToCrearUsuario()
    {
        NavigationManager.NavigateTo("/CreateUser");
    }

    private void MenuClick(User user)
    {
        Console.WriteLine($"Menú clic para el usuario: {user.FullName}");
    }

    private void VerUsuario(User user)
    {

        NavigationManager.NavigateTo("/perfilAgente");
    }

    private void EliminarUsuario(User user)
    {
        Console.WriteLine($"Eliminar usuario: {user.FullName}");
        // Eliminar el usuario o realizar la acción deseada
    }

    private string GetImagePath(string gender)
    {
        if (gender == "Masculino")
        {
            return "imagenes/usuario.png";
        }
        else if (gender == "Femenino")
        {
            return "imagenes/femenina.png";
        }
        else
        {
            return "imagenes/usuario.png";  // Imagen predeterminada
        }
    }
}
