@page "/Usuarios"
@using AdministradorAmet.Models
@using Newtonsoft.Json
@using Radzen.Blazor
@inject HttpClient Http
@inject NavigationManager NavigationManager

<link href="https://fonts.googleapis.com/css2?family=Poppins:wght@500&display=swap" rel="stylesheet">
<link href="https://fonts.googleapis.com/css2?family=Roboto:wght@500&display=swap" rel="stylesheet">


<div class="header-container">
    <!-- Título -->
    <h1 class="title">Usuarios</h1>
</div>

<div class="container">
    <!-- Contenedor para el botón alineado a la derecha -->
    <div class="button-container">
        <!-- Botón "Nuevo" con clase CSS personalizada -->
        <RadzenButton Text="Nuevo" Icon="add"
                      Class="create-button"
                      Click="NavigateToCrearUsuario" />

    </div>
    <hr class="divider" />
    <!-- Barra de búsqueda alineada a la derecha con el texto "Buscar" -->
    <div class="search-container">
        <label for="search" class="search-label">Buscar</label>
        <RadzenTextBox Placeholder="Buscar usuario..."
                       ValueChanged="@(value => BuscarUsuario(value))"
                       Style="margin-bottom: 10px;"
                       Value="@searchText"
                       id="search" />
    </div>


   

    @if (users == null)
    {
        <p>Cargando....</p>
    }
    else
    {
        <div>
            <!-- DataGrid con los resultados filtrados -->
            <RadzenDataGrid AllowPaging="true" AllowFiltering="true" PageSize="9"
                            AllowSorting="true" Data="@filteredUsers" TItem="User"
                            RowClick="@(args => RowClicked(args.Data))"
                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                            AllowColumnResize="true">
                <Columns>
                    <RadzenDataGridColumn TItem="User" Title="" Width="35px">
                        <Template Context="usuario">
                            <RadzenGravatar Path="imagenes/usuario.png" />
                        </Template>
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn TItem="User" Property="FullName" Title="Nombre completo" Width="100px" />
                    <RadzenDataGridColumn TItem="User" Property="Gender" Title="Sexo" Width="75px" />
                    <RadzenDataGridColumn TItem="User" Property="Cedula" Title="Cédula" Width="80px" />
                    <RadzenDataGridColumn TItem="User" Property="Phone" Title="Teléfono" Width="80px" />
                    <RadzenDataGridColumn TItem="User" Property="Role" Title="Tipo de Usuario" Width="80px" />
                    <RadzenDataGridColumn TItem="User" Property="" Title="Acción" Width="50px" />
                </Columns>
            </RadzenDataGrid>
        </div>
    }
</div>

@code {
    private IEnumerable<User> users;
    private IEnumerable<User> filteredUsers;
    private string searchText = string.Empty;

    // Cargar los usuarios al inicializar la página
    protected override async Task OnInitializedAsync()
    {
        await CargarUsuarios();
        filteredUsers = users;
    }

    // Método para obtener los usuarios desde la API
    private async Task CargarUsuarios()
    {
        try
        {
            var response = await Http.GetStringAsync("https://localhost:7277/api/User/all");
            users = JsonConvert.DeserializeObject<List<User>>(response);
            filteredUsers = users;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar usuarios: {ex.Message}");
        }
    }

    // Método de búsqueda que se ejecuta cada vez que el valor cambia
    private void BuscarUsuario(string value)
    {
        // Si el campo de búsqueda está vacío, mostramos todos los usuarios
        if (string.IsNullOrWhiteSpace(value))
        {
            filteredUsers = users;
            return;
        }

        // Filtrar usuarios según el texto de búsqueda
        filteredUsers = users.Where(user =>
        {
            // Verificar si user es null antes de acceder a sus propiedades
            return user != null &&
                   (user.FullName?.Contains(value, StringComparison.OrdinalIgnoreCase) == true ||
                    user.Gender?.Contains(value, StringComparison.OrdinalIgnoreCase) == true ||
                    user.Cedula?.Contains(value, StringComparison.OrdinalIgnoreCase) == true ||
                    user.Phone?.Contains(value, StringComparison.OrdinalIgnoreCase) == true ||
                    user.Role?.Contains(value, StringComparison.OrdinalIgnoreCase) == true);
        }).ToList();
    }

    // Acción al hacer clic en una fila del grid
    private void RowClicked(User user)
    {
        Console.WriteLine($"Ver perfil del usuario: {user.FullName}");
        NavigationManager.NavigateTo("perfilUsuario");
    }

    // Método para redirigir a la página CrearUsuario
    private void NavigateToCrearUsuario()
    {
        NavigationManager.NavigateTo("/CreateUser");
    }
}
