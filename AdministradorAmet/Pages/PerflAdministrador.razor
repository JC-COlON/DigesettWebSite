@page "/perfilAdministrador/{cedula}"


@inject NavigationManager NavigationManager
@inject HttpClient Http
@using AdministradorAmet.Models
@using Newtonsoft.Json
@using Radzen
@using System.Globalization
@inject Radzen.DialogService DialogService
@inject IModalService Modal
@inject Radzen.DialogService Modal

<PageTitle>Perfil del Administrador</PageTitle>

<!-- Fuentes -->
<link href="https://fonts.googleapis.com/css2?family=Poppins:wght@500&display=swap" rel="stylesheet">
<link href="https://fonts.googleapis.com/css2?family=Roboto:wght@500&display=swap" rel="stylesheet">

<h1 class="title">Perfil del Administrador</h1>
@if (alertaVisible)
{
    <RadzenAlert Title="Error" AlertStyle="AlertStyle.Danger" Visible="true" Variant="Radzen.Variant.Flat" Shade="Shade.Lighter" Icon="info">
        No se pudo Eliminar el Administrador
    </RadzenAlert>
}

@if (errorVisible)
{
    <RadzenAlert Title="Exito" AlertStyle="AlertStyle.Info" Visible="true" Variant="Radzen.Variant.Flat" Shade="Shade.Lighter" Icon="error">
        Administrador Eliminado Correctamente.
    </RadzenAlert>
}

@if (usuario != null)
{
    <div class="main-container">
        <div class="left-column">
            <div class="container large-container">
                <div class="icons">
                    <img src="imagenes/restcontrasena.png" alt="CambiarContrasena" class="icon" title="Cambiar Contraseña" @onclick="() => changepassword()" />
                    <img src="imagenes/edit-icon.svg" alt="Editar" class="icon" title="Editar" @onclick=" () => IrAEditarUsuario()" />
                    <img src="imagenes/exportar.png" alt="Notas" class="icon" title="Exportar">
                    <img src="imagenes/delete-icon.svg" alt="Eliminar" class="icon" title="Eliminar" @onclick="() => ConfirmarEliminacion()" />
                </div>
                <div class="agent-info">
                    <div class="photo-section">
                        <img src="@((string.IsNullOrEmpty(usuario.Gender) ? "imagenes/usuario.png" : (usuario.Gender.ToLower() == "masculino") ? "imagenes/usuario.png" : "imagenes/femenina.png"))" alt="Foto de Perfil" class="profile-photo" />

                        <h3>@(string.IsNullOrEmpty(usuario?.FullName) ? "N/A" : usuario.FullName)</h3>
                        <p class="id">No. Agente: @(string.IsNullOrEmpty(usuario?.NoAgente) ? "N/A" : usuario.NoAgente)</p>
                    </div>

                    <div class="details-section">
                        <div class="column">
                            <p><strong>Cédula:</strong> @(string.IsNullOrEmpty(usuario?.Cedula) ? "N/A" : usuario.Cedula)</p>
                            <p><strong>Email:</strong> @(string.IsNullOrEmpty(usuario?.email) ? "N/A" : usuario.email)</p>
                            <p><strong>Teléfono:</strong> @(string.IsNullOrEmpty(usuario?.Phone) ? "N/A" : usuario.Phone)</p>
                            <p><strong>Género:</strong> @(string.IsNullOrEmpty(usuario?.Gender) ? "N/A" : usuario.Gender)</p>
                            <p><strong>Ubicación de Trabajo:</strong> @(string.IsNullOrEmpty(usuario?.workLocation) ? "N/A" : usuario.workLocation)</p>
                        </div>
                        <div class="column">
                            @{
                                DateTime? birthdate = null;
                                if (DateTime.TryParseExact(usuario?.birthdate, "yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None, out DateTime parsedDate))
                                {
                                    birthdate = parsedDate;
                                }

                                double? height = null;
                                if (double.TryParse(usuario?.height?.ToString(), out double parsedHeight))
                                {
                                    height = parsedHeight;
                                }
                            }

                            <p><strong>Tipo de Sangre:</strong> @(string.IsNullOrEmpty(usuario?.bloodType) ? "N/A" : usuario.bloodType)</p>
                            <p><strong>Estado Civil:</strong> @(string.IsNullOrEmpty(usuario?.CivilStatus) ? "N/A" : usuario.CivilStatus)</p>
                            <p><strong>Fecha de Nacimiento:</strong> @(birthdate.HasValue ? birthdate.Value.ToString("dd/MM/yyyy") : "N/A")</p>
                            <p><strong>Altura:</strong> @(height.HasValue ? height.Value.ToString() : "N/A")</p>
                        </div>
                    </div>
                </div>
            </div>




            <h3>Multas por Día</h3>
            <RadzenStack class="rz-p-0 rz-p-md-6 rz-p-lg-12">
                <RadzenCard Variant="Radzen.Variant.Outlined">
                    <RadzenStack Orientation="Radzen.Orientation.Horizontal" AlignItems="Radzen.AlignItems.Center" Wrap="FlexWrap.Wrap">
                        <RadzenStack Orientation="Radzen.Orientation.Horizontal" AlignItems="Radzen.AlignItems.Center" Gap="0.5rem">
                            <RadzenCheckBox @bind-Value="@smooth" Name="smooth"></RadzenCheckBox>
                            <RadzenLabel Text="Smooth" Component="smooth" />
                        </RadzenStack>
                        <RadzenStack Orientation="Radzen.Orientation.Horizontal" AlignItems="Radzen.AlignItems.Center" Gap="0.5rem">
                            <RadzenCheckBox @bind-Value="@showDataLabels" Name="dataLabels"></RadzenCheckBox>
                            <RadzenLabel Text="Show Data Labels" Component="dataLabels" />
                        </RadzenStack>
                        <RadzenStack Orientation="Radzen.Orientation.Horizontal" AlignItems="Radzen.AlignItems.Center" Gap="0.5rem">
                            <RadzenCheckBox @bind-Value="@showMarkers" Name="markers"></RadzenCheckBox>
                            <RadzenLabel Text="Show Markers" Component="markers" />
                        </RadzenStack>
                        <RadzenStack Orientation="Radzen.Orientation.Horizontal" AlignItems="Radzen.AlignItems.Center" Gap="0.5rem">
                            <RadzenCheckBox @bind-Value="@sharedTooltip" Name="sharedTooltip"></RadzenCheckBox>
                            <RadzenLabel Text="Shared Tooltip" Component="sharedTooltip" />
                        </RadzenStack>
                    </RadzenStack>
                </RadzenCard>
                <RadzenChart>
                    <RadzenChartTooltipOptions Shared="@sharedTooltip" />
                    <RadzenLineSeries Smooth="@smooth" Data="@datosGrafico" CategoryProperty="Day" Title="Multas por Día" ValueProperty="Tickets">
                        <RadzenMarkers Visible="@showMarkers" MarkerType="MarkerType.Circle" />
                        <RadzenSeriesDataLabels Visible="@showDataLabels" />
                    </RadzenLineSeries>
                    <RadzenCategoryAxis Padding="20">
                        <RadzenAxisTitle Text="Días de la Semana" />
                    </RadzenCategoryAxis>
                    <RadzenValueAxis Min="2" Max="20" Step="2">
                        <RadzenGridLines Visible="true" />
                        <RadzenAxisTitle Text="Cantidad de Multas" />
                    </RadzenValueAxis>
                </RadzenChart>


            </RadzenStack>
        </div>

        <div class="right-column">
            <div class="container">
                <h3>Promedio de Calificaciones</h3>
                <div class="rz-p-12 rz-text-align-center custom-rating">
                    <!-- Verificar si el agente tiene calificación, si no, mostrar estrellas vacías -->
                    <RadzenRating Value="@promedioRatingInt" ReadOnly="true" Max="5" Style="font-size: 52px; color:#fd8402  " />
                </div>
                <!-- Mostrar mensaje si no hay calificación -->
                @if (promedioRatingInt == 0 || promedioRatingInt == null)
                {
                    <p>Este agente no ha sido calificado</p>
                }
            </div>

            <div class="container">
                <h3>Últimas Reseñas</h3>
                @if (reseñas != null && reseñas.Count > 0)
                {
                    @for (int i = 0; i < 3; i++)
                    {
                        if (i < reseñas.Count)
                        {
                            <div class="review">
                                <p><strong>Comentario:</strong> @reseñas[i]?.Comment ?? "Sin comentarios"</p>
                                <p><strong>Rating:</strong> @reseñas[i]?.Rating ?? 0</p>
                                <p><strong>Fecha:</strong> @reseñas[i]?.CreatedAt.ToString("dd/MM/yyyy") ?? "N/A"</p>
                            </div>
                        }
                        else
                        {
                            <div class="review">
                                <p><strong>Comentario:</strong> Sin comentarios</p>
                            </div>
                        }
                    }
                }
                else
                {
                    <p>No hay comentarios disponibles para este agente.</p>
                }
            </div>
        </div>
    </div>
}
else
{
    <p>Cargando datos del usuario...</p>
}


@code {
    [Parameter] public string Cedula { get; set; }

    private User usuario;
    private List<Review> reseñas = new List<Review>();
    private double promedioRating;
    private int promedioRatingInt;
    private List<MultasPorDia> multasPorDia = new List<MultasPorDia>();
    private string[] diasSemana = { "lunes", "martes", "miércoles", "jueves", "viernes", "sábado", "domingo" };
    private List<DataItem> datosGrafico = new List<DataItem>();
    private bool smooth = true;
    private bool showDataLabels = true;
    private bool showMarkers = true;
    private bool sharedTooltip = false;
    bool alertaVisible = false;
    bool errorVisible = false;
    private IEnumerable<User> users;
    private IEnumerable<User> filteredUsers;

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(Cedula))
        {
            try
            {
                // Obtener datos del usuario
                usuario = await Http.GetFromJsonAsync<User>($"https://localhost:7277/api/User/{Cedula}");

                // Obtener reseñas del agente
                var responseReviews = await Http.GetStringAsync($"https://localhost:7277/api/Reviews/GetLatestReviewsForAgentByCedula/{Cedula}");
                var reviewsResponse = JsonConvert.DeserializeObject<ReviewsResponse>(responseReviews);

                if (reviewsResponse?.Reviews != null && reviewsResponse.Reviews.Count > 0)
                {
                    reseñas = reviewsResponse.Reviews;
                }
                else
                {
                    reseñas = new List<Review>();
                }

                // Obtener rating promedio
                var responseRating = await Http.GetStringAsync($"https://localhost:7277/api/Reviews/GetAgentRatingAverage?cedula={Cedula}");
                var ratingResponse = JsonConvert.DeserializeObject<RatingResponse>(responseRating);

                if (ratingResponse != null)
                {
                    promedioRating = ratingResponse.PromedioRating;
                    promedioRatingInt = (int)promedioRating; // Conversión a entero
                }
                else
                {
                    promedioRating = 0;
                    promedioRatingInt = 0;
                }

                // Obtener multas por día
                var responseMultas = await Http.GetStringAsync($"https://localhost:7277/api/Ticket/GetHistorialMultas/{Cedula}");
                var multasResponse = JsonConvert.DeserializeObject<Dictionary<string, int>>(responseMultas);

                if (multasResponse != null)
                {
                    // Convertir los datos de la API en una lista ordenada para el gráfico
                    datosGrafico = diasSemana.Select(dia =>
                    {
                        var cantidad = multasResponse.ContainsKey(dia) ? multasResponse[dia] : 0;
                        return new DataItem
                            {
                                Day = dia,
                                Tickets = cantidad
                            };
                    }).ToList();
                }
                else
                {
                    datosGrafico = diasSemana.Select(dia => new DataItem { Day = dia, Tickets = 0 }).ToList();
                }
            }
            catch (HttpRequestException ex)
            {
                Console.WriteLine($"Error al obtener datos: {ex.Message}");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error inesperado: {ex.Message}");
            }
        }
    }


    public class Review
    {
        public int Rating { get; set; }
        public string Comment { get; set; }
        public DateTime CreatedAt { get; set; }
    }

    public class ReviewsResponse
    {
        public List<Review> Reviews { get; set; }
    }

    public class RatingResponse
    {
        public double PromedioRating { get; set; }
    }

    public class MultasPorDia
    {
        public string Dia { get; set; } // Lunes, Martes, etc.
        public int Cantidad { get; set; }
    }

    public class DataItem
    {
        public string Day { get; set; } // Día de la semana (Lun, Mar, etc.)
        public int Tickets { get; set; } // Cantidad de multas
    }

    public class TicketData
    {
        public string Day { get; set; } = string.Empty;
        public int Tickets { get; set; }
    }


    // Método para mostrar el diálogo de confirmación
    async Task ConfirmarEliminacion()
    {
        var result = await DialogService.Confirm("¿Estás seguro de que deseas eliminar este usuario?", "Confirmar Eliminación", new ConfirmOptions() { OkButtonText = "Sí", CancelButtonText = "No" });

        // Llamar al método para eliminar, utilizando el valor del usuario seleccionado
        if (result ?? false)  // Si result es true (confirmación) o false (cancelación), se ejecuta
        {
            await EliminarUsuario(usuario.Cedula);
        }
    }


    async Task EliminarUsuario(string cedula)
    {
        try
        {
            var response = await Http.DeleteAsync($"https://localhost:7277/api/User/{cedula}");

            if (response.IsSuccessStatusCode)
            {
                // Actualiza la lista local de usuarios eliminando al usuario eliminado
                users = users.Where(u => u.Cedula != cedula).ToList();
                filteredUsers = users;

                // Notifica a la UI que hubo cambios
                StateHasChanged();

                // Muestra la alerta de éxito y la oculta después de 3 segundos
                await MostrarAlerta(true);
            }
            else
            {
                Console.WriteLine($"Error al eliminar usuario: {response.ReasonPhrase}");

                // Muestra la alerta de error y la oculta después de 3 segundos
                await MostrarAlerta(false);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error en la eliminación: {ex.Message}");

            // Muestra la alerta de error y la oculta después de 3 segundos
            await MostrarAlerta(false);
        }
    }
    private void IrAEditarUsuario()
    {


        NavigationManager.NavigateTo($"/editarUsuario/{Cedula}");
    }

    private void changepassword()
    {


        NavigationManager.NavigateTo($"/cambiarContrasena/{Cedula}");
    }


    async Task MostrarAlerta(bool exito)
    {
        if (exito)
        {
            alertaVisible = true;
            errorVisible = false;
        }
        else
        {
            alertaVisible = false;
            errorVisible = true;
        }

        StateHasChanged(); // Actualiza la UI inmediatamente para que la alerta sea visible

        await Task.Delay(2000); // Muestra la alerta durante 3 segundos
        NavigationManager.NavigateTo("/Usuarios");
        alertaVisible = false;
        errorVisible = false;

        StateHasChanged(); // Vuelve a actualizar la UI
    }


}


