@implements IAsyncDisposable
@page "/Home"
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject HttpClient Http
@using System.IO
@using AdministradorAmet.Models
@using System.Text.Json.Serialization
@using Tewr.Blazor.FileReader
@inject IFileReaderService filereader
@using Radzen
@using MudBlazor
@using Newtonsoft.Json
@using System.Globalization
@using Syncfusion.Blazor.Grids


<PageTitle>Home</PageTitle>

<link href="https://fonts.googleapis.com/css2?family=Roboto:wght@500&display=swap" rel="stylesheet">
<link href="https://fonts.googleapis.com/css2?family=Poppins:wght@500&display=swap" rel="stylesheet">




<div class="ContainerPrincipal">

    <h3 class="containertitulo" style="margin-bottom: 16px; margin-top: 32px;">Multas por Zona</h3>


        <div id="map" style="width: 700px; height: 500px;"></div>

     @*    <RadzenChart>
            <RadzenStackedColumnSeries Data="@barChartData"
                                       CategoryProperty="Category"
                                       Title="Multas por Zona"
                                       ValueProperty="Value"
                                       Fills="@(new[] { "#009C40" })">
                <RadzenSeriesDataLabels Visible="@showDataLabels" />
            </RadzenStackedColumnSeries>
            <RadzenValueAxis Min="0" Max="100" Step="10">
                <RadzenGridLines Visible="true" />
                <RadzenAxisTitle Text="Cantidad de Multas" />
            </RadzenValueAxis>
        </RadzenChart> *@



    <RadzenStack class="rz-p-0 rz-p-md-6 rz-p-lg-12">
        <RadzenCard Style="background-color: #f0f8ff; color: #333; border: 1px solid #007bff;">
            <RadzenStack Orientation="Radzen.Orientation.Horizontal" AlignItems="Radzen.AlignItems.Center" Wrap="FlexWrap.Wrap">
                <RadzenStack Orientation="Radzen.Orientation.Horizontal" AlignItems="Radzen.AlignItems.Center" Gap="0.5rem">
                    <RadzenCheckBox @bind-Value="@smooth" Name="smooth" Style="accent-color: #007bff;" />
                    <RadzenLabel Text="Suavizado" Component="smooth" Style="color: #007bff;" />
                </RadzenStack>
                <RadzenStack Orientation="Radzen.Orientation.Horizontal" AlignItems="Radzen.AlignItems.Center" Gap="0.5rem">
                    <RadzenCheckBox @bind-Value="@showDataLabels" Name="dataLabels" Style="accent-color: #007bff;" />
                    <RadzenLabel Text="Mostrar valores" Component="dataLabels" Style="color: #007bff;" />
                </RadzenStack>
                <RadzenStack Orientation="Radzen.Orientation.Horizontal" AlignItems="Radzen.AlignItems.Center" Gap="0.5rem">
                    <RadzenCheckBox @bind-Value="@showMarkers" Name="markers" Style="accent-color: #007bff;" />
                    <RadzenLabel Text="Mostrar marcadores" Component="markers" Style="color: #007bff;" />
                </RadzenStack>
            </RadzenStack>
        </RadzenCard>

        <!-- Título de la segunda gráfica correctamente alineado -->
        <h3 class="containertitulo" style="margin-bottom: 16px; margin-top: 32px;">Multas por Mes</h3>


      

        <RadzenChart>
            <RadzenChartTooltipOptions Shared="@sharedTooltip" />
            <RadzenLineSeries Smooth="@smooth"
                              Data="@multasPorMes"
                              CategoryProperty="Mes"
                              ValueProperty="Cantidad"
                              Title="Multas por Mes"
                              Stroke="#009C40">
                <RadzenMarkers Visible="@showMarkers" MarkerType="MarkerType.Diamond" />
                <RadzenSeriesDataLabels Visible="@showDataLabels" />
            </RadzenLineSeries>
            <RadzenCategoryAxis Padding="20" />
            <RadzenValueAxis Max="100" Step="10">
                <RadzenGridLines Visible="true" />
                <RadzenAxisTitle Text="Cantidad de Multas" />
            </RadzenValueAxis>
        </RadzenChart>
    </RadzenStack>



  

    
        <h3 class="containertitulo" style="margin-bottom:30px;">Multas Recientes</h3>

        <RadzenDataGrid Data="@tickets" TItem="Ticket">
            <Columns>
                <RadzenDataGridColumn TItem="Ticket" Title="Nombre Completo" Property="FullName" Width="125px">
                    <HeaderTemplate>
                        <span style="font-weight: bold; font-size: medium; font-family: 'Poppins', sans-serif;">Nombre Completo</span>
                    </HeaderTemplate>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="Ticket" Title="Cedula" Property="Identification" Width="80px">
                    <HeaderTemplate>
                        <span style="font-weight: bold; font-size: medium; font-family: 'Poppins', sans-serif;">Cedula</span>
                    </HeaderTemplate>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="Ticket" Title="Fecha" Property="TicketDate" Width="100px">
                    <HeaderTemplate>
                        <span style="font-weight: bold; font-size: medium; font-family: 'Poppins', sans-serif;">Fecha</span>
                    </HeaderTemplate>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="Ticket" Title="No. Multa" Property="TicketId" Width="60px">
                    <HeaderTemplate>
                        <span style="font-weight: bold; font-size: medium; font-family: 'Poppins', sans-serif;">No. Multa</span>
                    </HeaderTemplate>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="Ticket" Title="Agente No." Property="AgentNumber" Width="75px">
                    <HeaderTemplate>
                        <span style="font-weight: bold; font-size: medium; font-family: 'Poppins', sans-serif;">Agente No.</span>
                    </HeaderTemplate>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="Ticket" Width="50px" Title="Acción">
                    <HeaderTemplate>
                        <span style="font-weight: bold; font-size: medium; font-family: 'Poppins', sans-serif;">Ver</span>
                    </HeaderTemplate>
                    <Template Context="data">
                        <RadzenButton Icon="more_vert" Click="@(args => VerDetalles(data.TicketId))" />
                    </Template>
                </RadzenDataGridColumn>



            </Columns>
        </RadzenDataGrid>

        </div>





<div class="ContenedorDerecho">


    <div class="ContainerIzq1">
        <!-- Selector de rango -->
        <select @onchange="HandleChange" class="SelectStyled">
            <option value="dia">Día</option>
            <option value="semana">Semana</option>
            <option value="mes">Mes</option>
            <option value="ano">Año</option>
            <option value="total" selected>Total</option>
        </select>
        <RadzenStack class="rz-p-0 rz-p-md-6 rz-p-lg-12" style="padding-top: 0;">
            <RadzenChart Style="height: 275px; width: 275px">
                <RadzenPieSeries Data="@multasData" Title="Multas" CategoryProperty="Estado" ValueProperty="Monto"
                                 Fills="@(new[] { "#009C40", "#fc8403" })">
                    <RadzenSeriesDataLabels Visible="false" />
                </RadzenPieSeries>
            </RadzenChart>
        </RadzenStack>


        <p class="SubTextGrafico">Ingresos por multas</p>
    </div>

    <div class="ContainerIzq2" style="cursor: pointer;" @onclick="() => RedirigirReporte()">
        <div class="ContentWrapper">
            <img src="imagenes/multatotal.png" alt="Total multas" class="IconImage">
            <div>
                <h1 class="CountNumber">@TotalMultasRegistradas</h1>
                <p class="SubTexttotal">Total de Multas Registradas</p>
            </div>
        </div>
    </div>



    <div class="ContainerIzq3" @onclick="@(() => RedirigirReporte("paid"))" style="cursor:pointer;">
        <div class="ContentWrapper">
            <img src="imagenes/pagadas.png" alt="Multas Pagadas" class="IconImage">
            <div>
                <h1 class="CountNumber">@TotalMultasPagadas</h1>
                <p class="SubText">Multas Pagadas</p>
            </div>
        </div>
    </div>

    <div class="ContainerIzq4" @onclick="@(() => RedirigirReporte("pending"))" style="cursor:pointer;">
        <div class="ContentWrapper">
            <img src="imagenes/pendiente.png" alt="Multas Pendientes" class="IconImage">
            <div>
                <h1 class="CountNumber">@TotalMultasPendientes</h1>
                <p class="SubText">Multas Pendientes</p>
            </div>
        </div>
    </div>



</div>

@code {
    private List<Ticket> tickets;
    private int TotalMultasRegistradas { get; set; }
    private int TotalMultasPagadas { get; set; }
    private int TotalMultasPendientes { get; set; }
    private string selectedRango = "total"; // Valor por defecto establecido a "total"
    private HashSet<int> nuevasMultas = new HashSet<int>();
    private DateTime? fechaInicio;
    private DateTime? fechaFin;


    // Datos para el gráfico de pastel
    private List<DataItem> multasData = new List<DataItem>();

    // Método para manejar el cambio de selección del rango
    private async Task HandleChange(ChangeEventArgs e)
    {
        selectedRango = e.Value.ToString();

        switch (selectedRango)
        {
            case "dia":
                fechaInicio = fechaFin = DateTime.Today;
                break;
            case "semana":
                var today = DateTime.Today;
                int delta = DayOfWeek.Monday - today.DayOfWeek;
                fechaInicio = today.AddDays(delta);
                fechaFin = fechaInicio.Value.AddDays(6);
                break;
            case "mes":
                fechaInicio = new DateTime(DateTime.Today.Year, DateTime.Today.Month, 1);
                fechaFin = fechaInicio.Value.AddMonths(1).AddDays(-1);
                break;
            case "ano":
                fechaInicio = new DateTime(DateTime.Today.Year, 1, 1);
                fechaFin = new DateTime(DateTime.Today.Year, 12, 31);
                break;
            case "total":
            default:
                fechaInicio = null;
                fechaFin = null;
                break;
        }

        await ObtenerMultasResumen();
    }


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await ObtenerMultasResumen(); // Llamar al método para obtener las multas al inicio
        await CargarUltimasMultas();
        await LoadBarChartData();

        try
        {
            var response = await Http.GetFromJsonAsync<ApiResponse>(
                "https://localhost:7277/api/Ticket/multas/por-mes");

            multasPorMes = response?.Values?
                .OrderBy(m => DateTime.ParseExact(m.Mes, "MMMM", new CultureInfo("es-ES")))
                .Select(m => new MultaPorMes
                    {
                        Mes = ConvertirMes(m.Mes),
                        Cantidad = m.Cantidad
                    })
                .ToArray() ?? Array.Empty<MultaPorMes>();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error cargando datos: {ex.Message}");
        }
    }

    private async Task ObtenerMultasResumen()
    {
        try
        {
            // Hacer la solicitud a la API con el rango seleccionado
            var response = await Http.GetStringAsync($"https://localhost:7277/api/Ticket/multas/resumen?rango={selectedRango}");

            // Deserializar el JSON obtenido
            var resumenMultas = JsonConvert.DeserializeObject<ResumenMultas>(response);

            // Asignar los valores a las variables correspondientes
            TotalMultasRegistradas = resumenMultas.total;
            TotalMultasPagadas = resumenMultas.pagadas;
            TotalMultasPendientes = resumenMultas.pendientes;

            // Actualizar datos del gráfico de pastel
            multasData = new List<DataItem>
            {
                new DataItem {
                    Estado = "Pagadas",
                    Monto = double.Parse(resumenMultas.totalPaidAmount
                        .Replace("RD$", "")
                        .Replace(",", "")
                        .Trim(),
                        CultureInfo.InvariantCulture)
                },
                new DataItem {
                    Estado = "Pendientes",
                    Monto = double.Parse(resumenMultas.totalPendingAmount
                        .Replace("RD$", "")
                        .Replace(",", "")
                        .Trim(),
                        CultureInfo.InvariantCulture)
                }
            };
        }
        catch (Exception ex)
        {
            // Manejo de errores, por si la API no responde o ocurre algún problema
            Console.WriteLine($"Error al obtener los datos: {ex.Message}");
        }
    }

    private async Task CargarUltimasMultas()
    {
        try
        {
            // Obtener todas las multas desde la API
            var response = await Http.GetStringAsync("https://localhost:7277/api/Ticket/allticket");

            if (!string.IsNullOrEmpty(response))
            {
                // Deserializar las multas
                var todasLasMultas = JsonConvert.DeserializeObject<List<Ticket>>(response);

                if (todasLasMultas != null)
                {
                    // Ordenar las multas por la fecha más reciente
                    tickets = todasLasMultas.OrderByDescending(multa => multa.TicketDate).Take(4).ToList();
                    nuevasMultas = new HashSet<int>(tickets.Select(m => m.TicketId)); // Marcar todas las nuevas multas
                    Console.WriteLine($"Últimas 4 multas: {tickets?.Count()}");
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar las últimas multas: {ex.Message}");
        }
    }

    private bool EsNuevaMulta(int ticketId)
    {
        return nuevasMultas.Contains(ticketId);
    }

    private void VerDetalles(int ticketId)
    {
        nuevasMultas.Remove(ticketId); // Marcar la multa como vista
        NavigationManager.NavigateTo($"/detallemulta/{ticketId}");
    }

    private string ConvertirMes(string mes)
    {
        return mes switch
        {
            "enero" => "ENE",
            "febrero" => "FEB",
            "marzo" => "MAR",
            "abril" => "ABR",
            "mayo" => "MAY",
            "junio" => "JUN",
            "julio" => "JUL",
            "agosto" => "AGO",
            "septiembre" => "SET",
            "octubre" => "OCT",
            "noviembre" => "NOV",
            "diciembre" => "DIC",
            _ => mes
        };
    }

    // Clase para deserializar el JSON
    public class ResumenMultas
    {
        public int total { get; set; }
        public int pagadas { get; set; }
        public int pendientes { get; set; }
        public string totalPaidAmount { get; set; }
        public string totalPendingAmount { get; set; }
    }

    // Clase para los datos del gráfico de pastel
    public class DataItem
    {
        public string Estado { get; set; }
        public double Monto { get; set; }
    }

    bool smooth = false;
    bool sharedTooltip = true;
    bool showDataLabels = false;
    bool showMarkers = true;

    MultaPorMes[] multasPorMes = Array.Empty<MultaPorMes>();

    public class ApiResponse
    {
        [JsonPropertyName("$values")]
        public List<MultaPorMes> Values { get; set; }
    }

    public class MultaPorMes
    {
        public string Mes { get; set; }
        public int Cantidad { get; set; }
    }


    public class TicketResponse
    {
        [JsonProperty("$values")]
        public List<Ticket> Tickets { get; set; }
    }

    public class Ticket
    {
        public int TicketId { get; set; }
        public string Zone { get; set; }
        public string Name { get; set; }
        public string LastName { get; set; }
        public string Phone { get; set; }
        public string Email { get; set; }
        public string Identification { get; set; }
        public VehicleType VehicleType { get; set; }
        public string LicensePlate { get; set; }
        public string Brand { get; set; }
        public string Model { get; set; }
        public string IncidentLocation { get; set; }
        public string Observations { get; set; }
        public string AgentNumber { get; set; }
        public DateTime TicketDate { get; set; }
        public Article Articulo { get; set; }
        public Agent Agente { get; set; }
        public string Status { get; set; }
        public string FullName => $"{Name} {LastName}";
    }
    public class DataItemm
    {
        public string Category { get; set; }
        public int Value { get; set; }
    }



    private List<DataItemm> barChartData = new();


    private async Task LoadBarChartData()
    {
        var url = "https://localhost:7277/api/Ticket/allTicket";
        var response = await Http.GetStringAsync(url);

        // Reparar formato JSON si es necesario
        response = response.Replace("\"$id\":", "\"__id__\":");

        var data = JsonConvert.DeserializeObject<TicketResponse>(response);

        if (data?.Tickets != null)
        {
            // Agrupar por zona y contar
            var groupedByZone = data.Tickets
                .Where(t => !string.IsNullOrEmpty(t.Zone))
                .GroupBy(t => t.Zone)
                .Select(g => new DataItemm
                    {
                        Category = g.Key,
                        Value = g.Count()
                    })
                .ToList();

            barChartData = groupedByZone;
        }
    }

    private void RedirigirReporte(string estado = null)
    {
        var inicioStr = fechaInicio?.ToString("yyyy-MM-dd");
        var finStr = fechaFin?.ToString("yyyy-MM-dd");

        var queryParams = new List<string>();

        if (!string.IsNullOrWhiteSpace(estado))
            queryParams.Add($"estado={estado}");

        if (!string.IsNullOrWhiteSpace(inicioStr))
            queryParams.Add($"fechainicio={Uri.EscapeDataString(inicioStr)}");

        if (!string.IsNullOrWhiteSpace(finStr))
            queryParams.Add($"fechafin={Uri.EscapeDataString(finStr)}");

        // 🚨 Si no hay fechas ni estado, quiere decir que es el total general
        if (string.IsNullOrWhiteSpace(estado) && string.IsNullOrWhiteSpace(inicioStr) && string.IsNullOrWhiteSpace(finStr))
        {
            queryParams.Add("auto=true");
        }

        var url = "/ReportesOperativos";

        if (queryParams.Any())
            url += "?" + string.Join("&", queryParams);

        NavigationManager.NavigateTo(url);
    }


    private IJSObjectReference? module;
    private string? result;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {

            module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "/jquery/leafletmap.js");


            result = await module.InvokeAsync<string>("load_map");
        }
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (module is not null)
        {
            await module.DisposeAsync();
        }
    }




}


