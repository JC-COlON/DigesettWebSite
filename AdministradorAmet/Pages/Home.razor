@page "/Home"
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject HttpClient Http
@using Radzen
@using MudBlazor


<PageTitle>Home</PageTitle>

<link href="https://fonts.googleapis.com/css2?family=Roboto:wght@500&display=swap" rel="stylesheet">
<link href="https://fonts.googleapis.com/css2?family=Poppins:wght@500&display=swap" rel="stylesheet">

<!-- Contenedor para alinear todo a la izquierda -->
<div style="display: flex; justify-content: flex-start; align-items: flex-start; flex-direction: column; padding-left: 20px;">
    <!-- Sección de Inputs y Botón -->
    <RadzenStack Orientation="Radzen.Orientation.Vertical" AlignItems="Radzen.AlignItems.Start" Gap="10px" class="rz-p-4">
        <RadzenButton Text="Consultar" Click="OnConsultarClick" Style="background-color: #009C40; color: white; border: 3px solid #009C40; width:175px; font-family: 'Poppins', sans-serif;" />
        <RadzenDatePicker @bind-Value="startDate" Placeholder="Fecha Inicio" Style="width: 175px; font-family: 'Poppins', sans-serif;" DateFormat="dd/MM/yyyy" />
        <RadzenDatePicker @bind-Value="endDate" Placeholder="Fecha Fin" Style="width: 175px; font-family: 'Poppins', sans-serif;" DateFormat="dd/MM/yyyy" />
    </RadzenStack>

    <!-- Sección de Tarjetas -->
    <RadzenStack Orientation="Radzen.Orientation.Vertical" AlignItems="Radzen.AlignItems.Start" Gap="10px" class="rz-p-4">
        <RadzenCard Style="width: 175px; border:3px solid black; font-family: 'Poppins', sans-serif;">
            <h4>Total</h4>
            <p>@totalTickets</p>
        </RadzenCard>
        <RadzenCard Style="width: 175px; border:3px solid #fc8403; font-family: 'Poppins', sans-serif;">
            <h4>Pendientes</h4>
            <p>@pendingTickets</p>
        </RadzenCard>
        <RadzenCard Style="width: 175px; border:3px solid #009C40; font-family: 'Poppins', sans-serif;">
            <h4>Pagadas</h4>
            <p>@paidTickets</p>
        </RadzenCard>
    </RadzenStack>
</div>

@code {
    DateTime? startDate { get; set; }
    DateTime? endDate { get; set; }

    int totalTickets { get; set; }
    int pendingTickets { get; set; }
    int paidTickets { get; set; }

    async Task OnConsultarClick()
    {
        if (startDate.HasValue && endDate.HasValue)
        {
            string startDateStr = startDate.Value.ToString("dd/MM/yyyy");
            string endDateStr = endDate.Value.ToString("dd/MM/yyyy");

            var response = await Http.GetFromJsonAsync<MultasResponse>($"https://localhost:7277/api/Ticket/MultasPorFecha?startDate={startDateStr}&endDate={endDateStr}");

            if (response != null)
            {
                totalTickets = response.TotalTickets;
                pendingTickets = response.PendingTickets;
                paidTickets = response.PaidTickets;
            }
        }
    }

    public class MultasResponse
    {
        public int TotalTickets { get; set; }
        public int PendingTickets { get; set; }
        public int PaidTickets { get; set; }
    }
}
