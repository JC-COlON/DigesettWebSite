@page "/Home"
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject HttpClient Http
@using System.IO
@using AdministradorAmet.Models
@using Tewr.Blazor.FileReader
@inject IFileReaderService filereader
@using Radzen
@using MudBlazor
@using Newtonsoft.Json
@using System.Globalization

<PageTitle>Home</PageTitle>

<link href="https://fonts.googleapis.com/css2?family=Roboto:wght@500&display=swap" rel="stylesheet">
<link href="https://fonts.googleapis.com/css2?family=Poppins:wght@500&display=swap" rel="stylesheet">

<div class="ContainerPrincipal">
    <!-- Contenido del contenedor principal -->
</div>

<div class="ContenedorIzquierdo">


    <div class="ContainerIzq1">
        <!-- Selector de rango -->
        <select @onchange="HandleChange" class="SelectStyled">
            <option value="dia">Día</option>
            <option value="semana">Semana</option>
            <option value="mes">Mes</option>
            <option value="ano">Año</option>
            <option value="total" selected>Total</option>
        </select>
        <RadzenStack class="rz-p-0 rz-p-md-6 rz-p-lg-12" style="padding-top: 0;">
            <!-- Elimina el padding superior aquí -->
            <RadzenChart Style="height: 275px; width: 275px">
                <RadzenPieSeries Data="@multasData" Title="Multas" CategoryProperty="Estado" ValueProperty="Monto">
                    <RadzenSeriesDataLabels Visible="true" />
                </RadzenPieSeries>
            </RadzenChart>
        </RadzenStack>


        <p class="SubTextGrafico">Ingresos por multas</p>
    </div>




    <div class="ContainerIzq2">
        <!-- Contenido de multas registradas con número -->
        <div class="ContentWrapper">
            <img src="imagenes/multatotal.png" alt="Toral multas" class="IconImage">
            <div>
                <h1 class="CountNumber">@TotalMultasRegistradas</h1>
                <p class="SubTexttotal">Total de Multas Registradas</p>
            </div>
        </div>
    </div>

    <div class="ContainerIzq3">
        <!-- Contenido de multas pagadas con imagen -->
        <div class="ContentWrapper">
            <img src="imagenes/pagadas.png" alt="Multas Pagadas" class="IconImage">
            <div>
                <h1 class="CountNumber">@TotalMultasPagadas</h1>
                <p class="SubText">Multas Pagadas</p>
            </div>
        </div>
    </div>

    <div class="ContainerIzq4">
        <!-- Contenido de multas pendientes con imagen -->
        <div class="ContentWrapper">
            <img src="imagenes/pendiente.png" alt="Multas Pendientes" class="IconImage">
            <div>
                <h1 class="CountNumber">@TotalMultasPendientes</h1>
                <p class="SubText">Multas Pendientes</p>
            </div>
        </div>
    </div>

</div>

@code {
    private int TotalMultasRegistradas { get; set; }
    private int TotalMultasPagadas { get; set; }
    private int TotalMultasPendientes { get; set; }
    private string selectedRango = "total"; // Valor por defecto establecido a "total"

    // Datos para el gráfico de pastel
    private List<DataItem> multasData = new List<DataItem>();

    // Método para manejar el cambio de selección del rango
    private async Task HandleChange(ChangeEventArgs e)
    {
        selectedRango = e.Value.ToString();
        await ObtenerMultasResumen();
    }

    protected override async Task OnInitializedAsync()
    {
        await ObtenerMultasResumen(); // Llamar al método para obtener las multas al inicio
    }

    private async Task ObtenerMultasResumen()
    {
        try
        {
            // Hacer la solicitud a la API con el rango seleccionado
            var response = await Http.GetStringAsync($"https://localhost:7277/api/Ticket/multas/resumen?rango={selectedRango}");

            // Deserializar el JSON obtenido
            var resumenMultas = JsonConvert.DeserializeObject<ResumenMultas>(response);

            // Asignar los valores a las variables correspondientes
            TotalMultasRegistradas = resumenMultas.total;
            TotalMultasPagadas = resumenMultas.pagadas;
            TotalMultasPendientes = resumenMultas.pendientes;

            // Actualizar datos del gráfico de pastel
            multasData = new List<DataItem>
            {
                new DataItem {
                    Estado = "Pagadas",
                    Monto = double.Parse(resumenMultas.totalPaidAmount
                        .Replace("RD$", "")
                        .Replace(",", "")
                        .Trim(),
                        CultureInfo.InvariantCulture)
                },
                new DataItem {
                    Estado = "Pendientes",
                    Monto = double.Parse(resumenMultas.totalPendingAmount
                        .Replace("RD$", "")
                        .Replace(",", "")
                        .Trim(),
                        CultureInfo.InvariantCulture)
                }
            };
        }
        catch (Exception ex)
        {
            // Manejo de errores, por si la API no responde o ocurre algún problema
            Console.WriteLine($"Error al obtener los datos: {ex.Message}");
        }
    }

    // Clase para deserializar el JSON
    public class ResumenMultas
    {
        public int total { get; set; }
        public int pagadas { get; set; }
        public int pendientes { get; set; }
        public string totalPaidAmount { get; set; }
        public string totalPendingAmount { get; set; }
    }

    // Clase para los datos del gráfico de pastel
    public class DataItem
    {
        public string Estado { get; set; }
        public double Monto { get; set; }
    }
}
