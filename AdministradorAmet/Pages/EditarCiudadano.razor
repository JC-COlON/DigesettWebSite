@page "/editarCiudadano/{cedula}"
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject Radzen.DialogService DialogService
@using System.Text.RegularExpressions;
@using AdministradorAmet.Models
@using Newtonsoft.Json;
@using static AdministradorAmet.Pages.PerfilCiudadano

<div class="container">
    <div class="header">
        <h1 class="title">Editar Usuario</h1>
    </div>
    <div class="central-section">
        <div class="image-section">
            <div class="profile-image-container">
                <img src="imagenes/usuario.png" alt="Imagen de perfil" class="profile-image" id="previewImagenPerfil" />
            </div>
            <div class="image-input">
                <InputFile OnChange="ImagenPerfilSeleccionada"  />
            </div>
        </div>
    </div>

    <div class="inputs-grid-single-column">
        <div class="input-group">
            <label for="inputNombre">Nombre</label>
            <input id="inputNombre" type="text" class="form-input same-size-input" @bind="name" disabled />
            @if (!string.IsNullOrEmpty(nameError))
            {
                <span class="error-message">@nameError</span>
            }
        </div>

        <div class="input-group">
            <label for="inputApellido">Apellido</label>
            <input id="inputApellido" type="text" class="form-input same-size-input" @bind="lastname" />
            @if (!string.IsNullOrEmpty(lastnameError))
            {
                <span class="error-message">@lastnameError</span>
            }
        </div>

        <div class="input-group">
            <label for="inputCedula">Cédula</label>
            <input id="inputCedula" type="text" class="form-input same-size-input" maxlength="11" @bind="Cedula"  />
            @if (!string.IsNullOrEmpty(cedulaError))
            {
                <span class="error-message">@cedulaError</span>
            }
        </div>

        <div class="input-group">
            <label for="inputTelefono">Teléfono</label>
            <input id="inputTelefono" type="text" class="form-input same-size-input" maxlength="10" @bind="phone" />
            @if (!string.IsNullOrEmpty(phoneError))
            {
                <span class="error-message">@phoneError</span>
            }
        </div>

        <div class="input-group">
            <label for="inputEmail">Email</label>
            <input id="inputEmail" type="email" class="form-input same-size-input" @bind="email" />
            @if (!string.IsNullOrEmpty(emailError))
            {
                <span class="error-message">@emailError</span>
            }
        </div>
    </div>

    <div class="buttons">
        <button class="cancel-button" @onclick="Cancelar">Cancelar</button>
        <button class="create-button" @onclick="ConfirmarActualizacion">Actualizar</button>
    </div>
</div>

@code {
    [Parameter] public EditarCiudadanoParams Parametros { get; set; }

    private const string ApiUrl = "https://localhost:7277/api/User/";
    private string profileImgPreview { get; set; } = string.Empty;
    private string name { get; set; } = string.Empty;
    private string lastname { get; set; } = string.Empty;
    private string Cedula { get; set; } = string.Empty;
    private string phone { get; set; } = string.Empty;
    private string email { get; set; } = string.Empty;
    private string profileImg { get; set; } = string.Empty;
    bool alertaVisible = false;
    bool errorVisible = false;

    private string nameError { get; set; }
    private string lastnameError { get; set; }
    private string cedulaError { get; set; }
    private string phoneError { get; set; }
    private string emailError { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (Parametros != null && !string.IsNullOrEmpty(Parametros.Cedula))
        {
            Console.WriteLine($"Inicializando con cédula: {Parametros.Cedula}");
            Cedula = Parametros.Cedula;  // Asignamos la cédula del parámetro a la propiedad interna
            await CargarUsuario(Cedula);  // Usamos Cedula aquí para cargar los datos
        }
        else
        {
            Console.WriteLine("Cédula está vacía o nula");
            await JSRuntime.InvokeVoidAsync("alert", "Cédula no proporcionada.");
        }
    }

    private async Task CargarUsuario(string cedula)
    {
        try
        {
            string urlCompleta = $"{ApiUrl}{cedula}";
            Console.WriteLine($"Cargando datos del usuario con cédula: {cedula} desde {urlCompleta}");
            var usuario = await Http.GetFromJsonAsync<User>(urlCompleta);

            if (usuario != null)
            {
                name = usuario.Name;
                lastname = usuario.LastName;
                phone = usuario.Phone;
                email = usuario.email;
                profileImgPreview = usuario.profileImg ?? string.Empty;
                Cedula = usuario.Cedula;  // Esto no es necesario, ya que Cedula ya tiene el valor
                StateHasChanged();
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Usuario no encontrado.");
            }
        }
        catch (HttpRequestException httpEx)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error de solicitud HTTP: {httpEx.Message}");
            Console.WriteLine($"Error de solicitud HTTP: {httpEx}");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error al cargar datos del usuario: {ex.Message}");
            Console.WriteLine($"Error al cargar datos del usuario: {ex}");
        }
    }



    private async Task ImagenPerfilSeleccionada(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file is not null)
        {
            profileImg = file.Name;

            using var memoryStream = new MemoryStream();
            await file.OpenReadStream().CopyToAsync(memoryStream);
            var base64 = Convert.ToBase64String(memoryStream.ToArray());
            profileImgPreview = $"data:{file.ContentType};base64,{base64}";

            await JSRuntime.InvokeVoidAsync("setImagePreview", "#previewImagenPerfil", profileImgPreview);
        }
    }

    private void ConfirmarActualizacion()
    {
        DialogService.Confirm("¿Estás seguro de que deseas actualizar este usuario?", "Confirmar Actualización", new ConfirmOptions() { OkButtonText = "Sí", CancelButtonText = "No" })
            .ContinueWith(async task =>
            {
                if (task.Result == true)
                {
                    await ActualizarUsuario();
                }
            });
    }

    private async Task ActualizarUsuario()
    {
        bool isValid = true;
        string emailPattern = @"^[^@\s]+@[^@\s]+\.[^@\s]+$";

        if (string.IsNullOrWhiteSpace(name))
        {
            nameError = "El nombre es obligatorio.";
            isValid = false;
        }
        else
        {
            nameError = null;
        }

        if (string.IsNullOrWhiteSpace(lastname))
        {
            lastnameError = "El apellido es obligatorio.";
            isValid = false;
        }
        else
        {
            lastnameError = null;
        }

        if (string.IsNullOrWhiteSpace(Cedula))
        {
            cedulaError = "La cédula es obligatoria.";
            isValid = false;
        }
        else if (Cedula.Length != 11 || !Cedula.All(char.IsDigit))
        {
            cedulaError = "Cédula inválida. Debe tener 11 números.";
            isValid = false;
        }
        else
        {
            cedulaError = null;
        }

        if (string.IsNullOrWhiteSpace(phone))
        {
            phoneError = "El teléfono es obligatorio.";
            isValid = false;
        }
        else if (phone.Length != 10 || !phone.All(char.IsDigit))
        {
            phoneError = "Número de teléfono inválido. Debe tener 10 números.";
            isValid = false;
        }
        else
        {
            phoneError = null;
        }

        if (string.IsNullOrWhiteSpace(email))
        {
            emailError = "El correo electrónico es obligatorio.";
            isValid = false;
        }
        else if (!Regex.IsMatch(email, emailPattern))
        {
            emailError = "El correo electrónico no tiene un formato válido.";
            isValid = false;
        }
        else
        {
            emailError = null;
        }

        if (!isValid)
        {
            return;
        }

        var usuario = new
        {
            cedula = Cedula,
            name = name,
            lastname = lastname,
            email = string.IsNullOrWhiteSpace(email) ? null : email,
            phone = string.IsNullOrWhiteSpace(phone) ? null : phone,
            profileImg = string.IsNullOrWhiteSpace(profileImg) ? null : profileImg
        };

        try
        {
            var response = await Http.PutAsJsonAsync($"{ApiUrl}{Cedula}", usuario);
            Console.WriteLine(response);
            if (response.IsSuccessStatusCode)
            {
                await MostrarAlerta(true);
                NavigationManager.NavigateTo($"/Usuarios/{Cedula}");
            }
            else
            {
                await MostrarAlerta(false);
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error al actualizar usuario: {ex.Message}");
            Console.WriteLine($"Error al actualizar usuario: {ex}");
        }
    }

    private void Cancelar()
    {
        NavigationManager.NavigateTo("/usuarios");
    }

    async Task MostrarAlerta(bool exito)
    {
        if (exito)
        {
            alertaVisible = true;
            errorVisible = false;
        }
        else
        {
            alertaVisible = false;
            errorVisible = true;
        }

        StateHasChanged();
        await Task.Delay(2000);
        alertaVisible = false;
        errorVisible = false;
        StateHasChanged();
    }
}



