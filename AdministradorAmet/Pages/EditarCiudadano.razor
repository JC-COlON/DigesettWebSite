@page "/editarCiudadano/{Cedula}"

@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject Radzen.DialogService DialogService
@using System.Text.RegularExpressions;
@using AdministradorAmet.Models
@using Newtonsoft.Json;

<div class="container">
    <div class="header">
        <h1 class="title">Editar Usuario</h1>
    </div>
    @if (alertaVisible)
    {
        <RadzenAlert Title="Éxito" AlertStyle="AlertStyle.Success" Visible="true" Variant="Radzen.Variant.Flat" Shade="Shade.Lighter" Icon="info">
            Usuario Actualizado correctamente.
        </RadzenAlert>
    }

    @if (errorVisible)
    {
        <RadzenAlert Title="Error" AlertStyle="AlertStyle.Danger" Visible="true" Variant="Radzen.Variant.Flat" Shade="Shade.Lighter" Icon="error">
            No se pudo Actualizar el usuario.
        </RadzenAlert>
    }
    <div class="central-section">
        <div class="image-section">
            <div class="profile-image-container">
                <img src="imagenes/usuario.png" alt="Imagen de perfil" class="profile-image" id="previewImagenPerfil" disable />
            </div>
            <div class="image-input">
                <InputFile OnChange="ImagenPerfilSeleccionada" />
            </div>
        </div>
    </div>

    <div class="inputs-grid-single-column">
        <div class="input-group">
            <label for="inputNombre">Nombre</label>
            <input id="inputNombre" type="text" class="form-input same-size-input" @bind="name" />
            @if (!string.IsNullOrEmpty(nameError))
            {
                <span class="error-message">@nameError</span>
            }
        </div>

        <div class="input-group">
            <label for="inputApellido">Apellido</label>
            <input id="inputApellido" type="text" class="form-input same-size-input" @bind="lastname" />
            @if (!string.IsNullOrEmpty(lastnameError))
            {
                <span class="error-message">@lastnameError</span>
            }
        </div>

        <div class="input-group">
            <label for="inputPassword">Contraseña</label>
            <div class="password-container">
                <input id="inputPassword" type="@PasswordFieldType" class="form-input" @bind="password" disabled="@isPasswordDisabled" />
                <button type="button" class="password-toggle @PasswordToggleClass" @onclick="TogglePasswordField" disabled="@isPasswordDisabled">
                    👁
                </button>
            </div>
            @if (!string.IsNullOrEmpty(passwordError))
            {
                <span class="error-message">@passwordError</span>
            }
        </div>

        <div class="input-group">
            <label for="inputTelefono">Teléfono</label>
            <input id="inputTelefono" type="text" class="form-input same-size-input" maxlength="10" @bind="phone" />
            @if (!string.IsNullOrEmpty(phoneError))
            {
                <span class="error-message">@phoneError</span>
            }
        </div>

        <div class="input-group">
            <label for="inputEmail">Email</label>
            <input id="inputEmail" type="email" class="form-input same-size-input" @bind="email" />
            @if (!string.IsNullOrEmpty(emailError))
            {
                <span class="error-message">@emailError</span>
            }
        </div>
    </div>

    <div class="buttons">
        <button class="cancel-button" @onclick="Cancelar">Cancelar</button>
        <button class="create-button" @onclick="ConfirmarActualizacion">Actualizar</button>
    </div>
</div>

@code {
    [Parameter] 
    public string Cedula { get; set; }

    private string profileImgPreview { get; set; } = string.Empty;
    private string name { get; set; } = string.Empty;
    private string lastname { get; set; } = string.Empty;
    private string phone { get; set; } = string.Empty;
    private string email { get; set; } = string.Empty;
    private string profileImg { get; set; } = string.Empty;
    private string password { get; set; } = string.Empty;

    private string nameError { get; set; }
    private string lastnameError { get; set; }
    private string cedulaError { get; set; }
    private string phoneError { get; set; }
    private string emailError { get; set; }
    private string passwordError { get; set; }
    bool alertaVisible = false;
    bool errorVisible = false;

    private string PasswordFieldType { get; set; } = "password";
    private string PasswordToggleClass { get; set; } = "toggle-hidden";
    private bool isPasswordDisabled { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(Cedula))
        {
            await CargarUsuario(Cedula);
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("alert", "Cédula no proporcionada.");
        }
        Console.WriteLine($"Cédula enviada para actualización: {Cedula}");

    }


    private async Task CargarUsuario(string cedula)
    {
        try
        {
            string urlCompleta = $"https://localhost:7277/api/User/{cedula}";
            var usuario = await Http.GetFromJsonAsync<User>(urlCompleta);

            if (usuario != null)
            {
                name = usuario.Name;
                lastname = usuario.LastName;
                phone = usuario.Phone;
                email = usuario.email;
                profileImgPreview = usuario.profileImg ?? string.Empty;
                StateHasChanged();
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Usuario no encontrado.");
            }
        }
        catch (HttpRequestException httpEx)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error de solicitud HTTP: {httpEx.Message}");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error al cargar datos del usuario: {ex.Message}");
        }
    }

    private async Task ImagenPerfilSeleccionada(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            profileImg = file.Name;
            using var memoryStream = new MemoryStream();
            await file.OpenReadStream().CopyToAsync(memoryStream);
            var base64 = Convert.ToBase64String(memoryStream.ToArray());
            profileImgPreview = $"data:{file.ContentType};base64,{base64}";
        }
    }

    private void TogglePasswordField()
    {
        if (PasswordFieldType == "password")
        {
            PasswordFieldType = "text";   // La contraseña se hace visible
            PasswordToggleClass = "toggle-visible"; // Cambia la clase a verde
        }
        else
        {
            PasswordFieldType = "password"; // La contraseña se oculta
            PasswordToggleClass = "toggle-hidden"; // Vuelve a la clase negra
        }
    }

    private async Task ConfirmarActualizacion()
    {
        // Usar await directamente y obtener el resultado nullable
        bool? confirmar = await DialogService.Confirm(
            "¿Estás seguro de que deseas actualizar este usuario?",
            "Confirmar Actualización",
            new ConfirmOptions() { OkButtonText = "Sí", CancelButtonText = "No" }
        );

        // Convertir el nullable a bool (si es null se considera false)
        if (confirmar ?? false)
        {
            await ActualizarUsuario();
        }
    }

    private async Task ActualizarUsuario()
    {
        bool isValid = true;
        string emailPattern = @"^[^@\s]+@[^@\s]+\.[^@\s]+$";

        // Validar los campos con mensajes más detallados
        if (string.IsNullOrWhiteSpace(name))
        {
            nameError = "El nombre es obligatorio.";
            isValid = false;
        }
        if (string.IsNullOrWhiteSpace(lastname))
        {
            lastnameError = "El apellido es obligatorio.";
            isValid = false;
        }
        if (string.IsNullOrWhiteSpace(phone))
        {
            phoneError = "El número de teléfono es obligatorio.";
            isValid = false;
        }
        else if (phone.Length != 10 || !phone.All(char.IsDigit))
        {
            phoneError = "El número de teléfono debe tener 10 dígitos y solo contener números.";
            isValid = false;
        }
        if (string.IsNullOrWhiteSpace(email))
        {
            emailError = "El correo electrónico es obligatorio.";
            isValid = false;
        }
        else if (!Regex.IsMatch(email, emailPattern))
        {
            emailError = "El correo electrónico no tiene un formato válido. Ejemplo: usuario@dominio.com";
            isValid = false;
        }
        // Dentro de ActualizarUsuario()
        if (!isPasswordDisabled) // Solo validar si el campo está habilitado
        {
            if (string.IsNullOrWhiteSpace(password) || password.Length <= 6)
            {
                passwordError = "La contraseña debe tener más de 6 caracteres.";
                isValid = false;
            }
        }

        if (!isValid) return;

        var usuario = new
        {
            Cedula = Cedula,
            Name = name,
            LastName = lastname,
            Email = email,
            Phone = phone,
            ProfileImg = profileImg,
            Password = password // Solo si el API lo requiere
        };

        Console.WriteLine($"Usuario a enviar: {JsonConvert.SerializeObject(usuario)}");


        try
        {
            var response = await Http.PutAsJsonAsync($"https://localhost:7277/api/User/UpdateCiudadano/{Cedula}", usuario);

            if (response.IsSuccessStatusCode)
            {
                await MostrarAlerta(true);
                NavigationManager.NavigateTo($"/perfilCiudadano/{Cedula}");
            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                // Puedes agregar más detalles en el alert o consola para depurar
                Console.WriteLine($"Error en la actualización: {errorMessage}");
                await JSRuntime.InvokeVoidAsync("alert", $"Error al actualizar usuario. Código: {response.StatusCode}, Mensaje: {errorMessage}");
                await MostrarAlerta(false);
            }
        }
        catch (HttpRequestException httpEx)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error de solicitud HTTP: {httpEx.Message}");
            await MostrarAlerta(false);
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error al actualizar el usuario: {ex.Message}");
            await MostrarAlerta(false);
        }

    }


    private void Cancelar()
    {
        NavigationManager.NavigateTo("/Usuarios");
    }

    private async Task MostrarAlerta(bool exito)
    {
        alertaVisible = exito;
        errorVisible = !exito;

        StateHasChanged(); // Forzar actualización

        await Task.Delay(3000); // Mostrar durante 2 segundos

        alertaVisible = false;
        errorVisible = false;

        StateHasChanged();
    }
}
