@inherits LayoutComponentBase
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject Radzen.DialogService DialogService
@using System.IdentityModel.Tokens.Jwt

<RadzenDialog />

<div class="page" @onclick="CloseMenu">
    <!-- Sidebar -->
    <div class="sidebar">
        <NavMenu />
    </div>

    <!-- Main Content -->
    <main>
        <MudPopoverProvider />

        <!-- Top Row -->
        <div class="top-row d-flex align-items-center justify-content-end">
            <!-- User Menu -->
            <div class="user-menu d-flex align-items-center" @onclick:stopPropagation>
                <button @onclick="ToggleMenu" class="user-button d-flex align-items-center">
                    <img src="imagenes/user-circle.svg" alt="User Icon" class="icon" />
                    <span class="user-text">@UserName</span>
                </button>
                <div class="dropdown-menu" style="display: @(isMenuVisible ? "block" : "none")">
                    <a href="javascript:void(0);" class="dropdown-item" @onclick="IrAMiPerfil">
                        <img src="imagenes/user.png" alt="Profile Icon" class="dropdown-icon" />
                        Mi Perfil
                    </a>
                    <a class="dropdown-item" @onclick="cambiarcontraseña">
                        <img src="imagenes/settingIcon.svg" alt="Password Icon" class="dropdown-icon" />
                        Cambiar Contraseña
                    </a>
                    <div class="divider"></div>
                    <a href="javascript:void(0);" class="dropdown-item logout" @onclick="ConfirmarCerrarSesion">
                        <img src="imagenes/cerrarsesion.png" alt="Logout Icon" class="dropdown-icon logout-icon" />
                        Cerrar Sesión
                    </a>
                </div>
            </div>
        </div>

        <!-- Aquí agregamos la condición para mostrar el título -->
        <article class="content px-4">
            @if (!string.IsNullOrEmpty(PageTitle))
            {
                <h1>@PageTitle</h1>
            }
            @Body
        </article>
    </main>
</div>

@code {
    private bool isMenuVisible = false;

    [CascadingParameter]
    public string UserName { get; set; } = "Usuario: Administrador";

    [CascadingParameter]
    public string PageTitle { get; set; }

    private void ToggleMenu()
    {
        isMenuVisible = !isMenuVisible;
    }

    private void CloseMenu()
    {
        isMenuVisible = false;
    }

    private void cambiarcontraseña()
    {
        isMenuVisible = false;
        NavigationManager.NavigateTo("/cambiarContrasena/{Cedula}");
    }

    // Función para confirmar el cierre de sesión
    private async Task ConfirmarCerrarSesion()
    {
        // Mostrar el diálogo de confirmación de Radzen
        var result = await DialogService.Confirm(
            "¿Estás seguro de que deseas cerrar sesión?",
            "Confirmar Cierre de Sesión",
            new ConfirmOptions() { OkButtonText = "Sí", CancelButtonText = "No" });

        if (result == true) // Si el usuario confirma que sí
        {
            await CerrarSesion();  // Llamamos a la función para eliminar el token y redirigir al login
        }
    }

    // Función para cerrar sesión
    private async Task CerrarSesion()
    {
        // Eliminar el token del localStorage
        await JSRuntime.InvokeVoidAsync("sessionStorage.removeItem", "authToken");


        // Redirigir al usuario a la página de inicio de sesión
        NavigationManager.NavigateTo("/");
    }

    protected override async Task OnInitializedAsync()
    {
        var token = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "authToken");
        if (string.IsNullOrEmpty(token))
        {
            NavigationManager.NavigateTo("/");
        }
        else
        {
            var handler = new JwtSecurityTokenHandler();
            var jwtToken = handler.ReadJwtToken(token);
            var claims = jwtToken.Claims.ToDictionary(c => c.Type, c => c.Value);

            if (claims.TryGetValue("http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name", out var name))
            {
                UserName = $"Usuario: {name}";
            }
        }
    }

    private async Task IrAMiPerfil()

    
    {
        isMenuVisible = false;
        // Obtener la cédula del token
        var cedula = await ObtenerCedulaDelToken();
        if (!string.IsNullOrEmpty(cedula))
        {
            // Navegar a la página de perfil con la cédula
            NavigationManager.NavigateTo($"/perfilAdministrador/{cedula}");
        }
    }

    private async Task<string> ObtenerCedulaDelToken()
    {
        var token = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "authToken");
        if (string.IsNullOrEmpty(token)) return null;

        try
        {
            var handler = new JwtSecurityTokenHandler();
            var jwtToken = handler.ReadJwtToken(token);
            var claims = jwtToken.Claims.ToDictionary(c => c.Type, c => c.Value);
            return claims.TryGetValue("http://schemas.microsoft.com/ws/2008/06/identity/claims/serialnumber", out var cedula) ? cedula : null;
        }
        catch (Exception) { return null; }
    }
}
