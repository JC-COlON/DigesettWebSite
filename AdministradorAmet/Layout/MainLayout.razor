@inherits LayoutComponentBase
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@using System.IdentityModel.Tokens.Jwt
@inject NavigationManager NavigationManager
@using MudBlazor
<RadzenDialog />

<div class="page" @onclick="CloseMenu">
    <!-- Sidebar -->
    <div class="sidebar">
        <NavMenu />
    </div>

    <!-- Main Content -->
    <main>
        <!-- MudPopoverProvider debe estar aquí -->
        <MudPopoverProvider />

        <!-- Top Row -->
        <div class="top-row d-flex align-items-center justify-content-end">
            <!-- User Menu -->
            <div class="user-menu d-flex align-items-center" @onclick:stopPropagation>
                <button @onclick="ToggleMenu" class="user-button d-flex align-items-center">
                    <img src="imagenes/user-circle.svg" alt="User Icon" class="icon" />
                    <span class="user-text">@UserName</span>
                </button>
                <div class="dropdown-menu" style="display: @(isMenuVisible ? "block" : "none")">
                    <a href="perfilAgente" class="dropdown-item" @onclick="CloseMenu">
                        <img src="imagenes/user.png" alt="Profile Icon" class="dropdown-icon" />
                        Mi Perfil
                    </a>
                    <a href="/change-password" class="dropdown-item" @onclick="CloseMenu">
                        <img src="imagenes/settingIcon.svg" alt="Password Icon" class="dropdown-icon" />
                        Cambiar Contraseña
                    </a>
                    <div class="divider"></div>
                    <a href="" class="dropdown-item logout">
                        <img src="imagenes/cerrarsesion.png" alt="Logout Icon" class="dropdown-icon logout-icon" />
                        Cerrar Sesión
                    </a>

                    <!-- Modal de confirmación -->
                    @if (isLogoutModalVisible)
                    {
                        <div class="modal-overlay">
                            <div class="modal">
                                <h3 class="modal-title">Confirmación</h3>
                                <p class="modal-body">¿Estás seguro de que deseas cerrar sesión?</p>
                                <div class="modal-footer">
                                    <button class="btn btn-secondary" @onclick="CancelLogout">Cancelar</button>
                                    <button class="btn btn-danger" @onclick="ConfirmLogout">Salir</button>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Aquí agregamos la condición para mostrar el título -->
        <article class="content px-4">
            @if (!string.IsNullOrEmpty(PageTitle))
            {
                <h1>@PageTitle</h1>  <!-- Muestra el título solo si está definido -->
            }
            @Body
        </article>
    </main>
</div>

@code {
    private bool isMenuVisible = false;
    private bool isLogoutModalVisible = false;

    [CascadingParameter]
    public string UserName { get; set; } = "Usuario: Administrador";

    [CascadingParameter]
    public string PageTitle { get; set; }  // Agregamos esta propiedad para que las páginas puedan pasar el título

    private void ToggleMenu()
    {
        isMenuVisible = !isMenuVisible;
    }

    private void CloseMenu()
    {
        isMenuVisible = false;
    }

    private void ShowLogoutConfirmation()
    {
        Console.WriteLine("Se activó el modal.");
        isLogoutModalVisible = true;
    }

    private void CancelLogout()
    {
        isLogoutModalVisible = false;
    }

    private void ConfirmLogout()
    {
        isLogoutModalVisible = false;
        NavigationManager.NavigateTo("LoginAdministrador");
    }

    protected override async Task OnInitializedAsync()
    {
        var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "authToken");
        if (string.IsNullOrEmpty(token))
        {
            NavigationManager.NavigateTo("/");
        }
        else
        {
            var handler = new JwtSecurityTokenHandler();
            var jwtToken = handler.ReadJwtToken(token);
            var claims = jwtToken.Claims.ToDictionary(c => c.Type, c => c.Value);

            if (claims.TryGetValue("http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name", out var name))
            {
                UserName = $"Usuario: {name}";
            }
        }
    }
}
